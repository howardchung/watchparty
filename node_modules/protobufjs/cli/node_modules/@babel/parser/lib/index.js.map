{"version":3,"file":"index.js","sources":["../src/util/location.ts","../src/parse-error/credentials.ts","../src/parse-error/module-errors.ts","../src/parse-error/to-node-description.ts","../src/parse-error/standard-errors.ts","../src/parse-error/strict-mode-errors.ts","../src/parse-error/pipeline-operator-errors.ts","../src/parse-error.ts","../src/plugins/estree.ts","../src/tokenizer/context.ts","../src/tokenizer/types.ts","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.ts","../src/util/scopeflags.ts","../src/parser/base.ts","../src/parser/comments.ts","../src/util/whitespace.ts","../src/tokenizer/state.ts","../../babel-helper-string-parser/src/index.ts","../src/tokenizer/index.ts","../src/util/scope.ts","../src/plugins/flow/scope.ts","../src/util/class-scope.ts","../src/util/expression-scope.ts","../src/util/production-parameter.ts","../src/parser/util.ts","../src/parser/node.ts","../src/plugins/flow/index.ts","../src/plugins/jsx/xhtml.ts","../src/plugins/jsx/index.ts","../src/plugins/typescript/scope.ts","../src/plugins/typescript/index.ts","../src/plugins/placeholders.ts","../src/plugins/v8intrinsic.ts","../src/plugin-utils.ts","../src/options.ts","../src/parser/lval.ts","../src/parser/expression.ts","../src/parser/statement.ts","../src/parser/index.ts","../src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","export const enum ParseErrorCode {\n  SyntaxError = \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n}\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get(this: unknown): unknown {\n    return keys.reduce(\n      (object, key) =>\n        // @ts-expect-error key should index object\n        object[key],\n      this,\n    );\n  },\n  set(this: unknown, value: unknown) {\n    keys.reduce(\n      // @ts-expect-error key should index item\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: new () => T,\n  properties: any,\n  descriptors: any,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign(new constructor(), properties),\n    );\n\nexport { instantiate };\n","import { ParseErrorCode } from \"../parse-error\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n};\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// @ts-expect-error prefix is specified only when type is UpdateExpression\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix) as \"true\" | \"false\"]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","import toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"const\" | \"destructuring\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n};\n","export default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n};\n","import toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> = T extends Set<infer M>\n  ? M\n  : unknown;\n\ntype UnparanthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparanthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n};\n","import { Position } from \"./util/location\";\nimport {\n  instantiate,\n  ParseErrorCode,\n  type ParseErrorCredentials,\n  type ToMessage,\n  type SyntaxPlugin,\n} from \"./parse-error/credentials\";\nimport type { Undone } from \"./parser/node\";\nimport type { Node } from \"./types\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (a: {\n  loc: Position;\n  details: ErrorDetails;\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = {\n    loc: Position;\n    details: ErrorDetails;\n  };\n\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(\n          overrides: {\n            loc?: Position;\n            details?: ErrorDetails;\n          } = {},\n        ) {\n          const loc = (overrides.loc || {}) as Partial<Position>;\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get(this: ConstructorArgument): string {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    ) as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any> };\n\ntype ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: ParseErrorCode.SourceTypeModuleError,\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n        ? { message: template }\n        : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {\n  at: Position | Undone<Node>;\n} & ErrorDetails;\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","import { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { BindingTypes } from \"../util/scopeflags\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: BigInt | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.Node>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt<N.ExpressionStatement>(\n        directive.start,\n        directive.loc.start,\n      );\n      const expression = this.startNodeAt<N.EstreeLiteral>(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      // @ts-expect-error TS2339: Property 'raw' does not exist on type 'Undone '.\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.loc.end,\n      );\n      // @ts-expect-error N.Directive.value is not defined\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.loc.end,\n      ) as N.ExpressionStatement;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync?: boolean | null,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as any as N.EstreeProperty | N.EstreeMethodDefinition)\n        .value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: number | undefined | null,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(unfinished: Undone<N.AnyExport>) {\n      const node = super.parseExport(unfinished);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            // @ts-expect-error mutating AST types\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node as N.AnyExport;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    // @ts-expect-error override interfaces\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, start: number, startLoc: Position) {\n      super.resetStartLocation(node, start, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = {\n  [name: string]: TokenType;\n};\n\nexport const tt: InternalTokenTypes = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","import type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number;\n  end: number;\n  comments: Array<Comment>;\n  leadingNode: Node | null;\n  trailingNode: Node | null;\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Undone<Node>} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport { Errors, type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: \"loop\" | \"switch\" | undefined | null;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this) as (keyof State)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // @ts-expect-error\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n};\n","import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let containsInvalid = false;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      let escaped;\n      ({\n        ch: escaped,\n        pos,\n        lineStart,\n        curLine,\n      } = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      ));\n      if (escaped === null) {\n        containsInvalid = true;\n      } else {\n        out += escaped;\n      }\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return { pos, str: out, containsInvalid, lineStart, curLine };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/)!;\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n      ? isAllowedNumericSeparatorSibling.dec\n      : radix === 8\n      ? isAllowedNumericSeparatorSibling.oct\n      : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simplified tokenizer state structure\n    // @ts-expect-error\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // @ts-expect-error\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, containsInvalid, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        containsInvalid ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        containsInvalid ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    // @ts-expect-error: refine details typing\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | never {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        // @ts-expect-error: refine details typing\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<{}>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, {\n        at: buildPosition(pos, lineStart, curLine),\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedString, {\n        // Report the error at the string quote\n        at: buildPosition(pos - 1, lineStart, curLine),\n      });\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedTemplate, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n  };\n}\n","import {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlags) {\n    /*:: +createScope: (flags: ScopeFlags) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","import { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport Tokenizer from \"../tokenizer\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{}>,\n    {\n      at,\n    }: {\n      at: Position;\n    },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {ParseErrorConstructor<{||}>} error\n   * @param {Node} payload.at\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordArrowParemeterBindingError(\n    error: ParseErrorConstructor<{}>,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","export const // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = number;\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<number> = [];\n  enter(flags: number) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): number {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return ((isAsync ? PARAM_AWAIT : 0) |\n    (isGenerator ? PARAM_YIELD : 0)) as ParamKind;\n}\n","import { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { EstreePropertyDefinition, Node, ObjectProperty } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\nimport type Parser from \".\";\n\nimport type ScopeHandler from \"../util/scope\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): { new (...args: any): ScopeHandler };\n\n  // TODO\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length] as ParseError<any>,\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error\n  NodePrototype.__clone = function (): Node {\n    // @ts-expect-error\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] =\n          // @ts-expect-error: key must present in this\n          this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType>(): Undone<T> {\n    // @ts-expect-error\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T extends NodeType>(pos: number, loc: Position): Undone<T> {\n    // @ts-expect-error\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType>(type: Undone<NodeType>): Undone<T> {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    // @ts-expect-error migrate to Babel types AST typings\n    node.type = type;\n    // @ts-expect-error migrate to Babel types AST typings\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitailized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): {\n      new (...args: any): FlowScopeHandler;\n    } {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.Node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: Undone<N.FlowDeclare>,\n      isClass: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(\n          startPos,\n          startLoc,\n        );\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: Undone<N.FlowTypeAnnotation>,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode<N.FlowTypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context?: string | null, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            // @ts-expect-error: refine typings\n            this.finishArrowValidation(node);\n          } else {\n            // @ts-expect-error: refine typings\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    ): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: ReadonlyArray<N.Expression | undefined | null>,\n      isParenthesizedExpr?: boolean,\n    ): ReadonlyArray<N.Expression | undefined | null> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startPos: number | undefined | null,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectMethod | N.ObjectProperty {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: number | null,\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\" as const;\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\" as const;\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      allowModifiers?: boolean,\n    ): void {\n      // @ts-expect-error\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        // @ts-expect-error refine typings\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          // @ts-expect-error: refine tryParse typings\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n            // @ts-expect-error: refine tryParse typings\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Pattern[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(\n        startPos,\n        startLoc,\n      );\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Node;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Array<N.Node>;\n        numberMembers: Array<N.Node>;\n        stringMembers: Array<N.Node>;\n        defaultedMembers: Array<N.Node>;\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.Node>, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: Undone<N.Node>): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { type Undone } from \"../../parser/node\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXElement | null): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEndLoc.index,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startPos,\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        // @ts-expect-error migrate to Babel types\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(\n                  this.jsxParseSpreadChild(node as Undone<N.JSXSpreadChild>),\n                );\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(\n                    node as Undone<N.JSXExpressionContainer>,\n                    tc.j_expr,\n                  ),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { Position, createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_NONE,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\nimport type { Pattern } from \"../../types\";\nimport type { Expression } from \"../../types\";\nimport type { IJSXParserMixin } from \"../jsx\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  CannotFindName: ({ name }: { name: string }) => `Cannot find name '${name}'.`,\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements:\n    \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): {\n      new (...args: any): TypeScriptScopeHandler;\n    } {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (!tokenIsIdentifier(this.state.type) && this.state.type !== tt._in) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n      errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n    }: {\n      modified: ModifierBase;\n      allowedModifiers: readonly TsModifier[];\n      disallowedModifiers?: TsModifier[];\n      stopOnStartOfClassStaticBlock?: boolean;\n      // FIXME: make sure errorTemplate can receive `modifier`\n      errorTemplate?: any;\n    }): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined | null,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined | null {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"in\", \"out\"],\n        disallowedModifiers: [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"readonly\",\n          \"declare\",\n          \"abstract\",\n          \"override\",\n        ],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n      });\n    }\n\n    // for better error recover\n    tsParseNoneModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [],\n        disallowedModifiers: [\"in\", \"out\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n    }\n\n    tsParseTypeParameter(\n      parseModifiers: (\n        node: Undone<N.TsTypeParameter>,\n      ) => void = this.tsParseNoneModifiers.bind(this),\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        // @ts-expect-error refine typings\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): N.TsTypeReference | undefined | null {\n      if (this.lookahead().type !== tt._const) return null;\n\n      this.next();\n      const typeReference = this.tsParseTypeReference();\n\n      // If the type reference has type parameters, then you are using it as a\n      // type and not as a const signifier. We'll *never* be able to find this\n      // name, since const isn't allowed as a type name. So in this instance we\n      // get to pretend we're the type checker.\n      if (typeReference.typeParameters) {\n        this.raise(TSErrors.CannotFindName, {\n          at: typeReference.typeName,\n          name: \"const\",\n        });\n      }\n\n      return typeReference;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      return super\n        .parseBindingList(tt.parenR, charCodes.rightParenthesis)\n        .map(pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return pattern as any;\n        });\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined | null {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements: boolean | null = null;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        let checkType = type;\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          checkType = elementNode.type;\n        }\n\n        const isLabeled = checkType === \"TSNamedTupleMember\";\n        labeledElements ??= isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type: N.TsType | N.TsNamedTupleMember = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = type.typeName as N.Identifier;\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // @ts-expect-error\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        // @ts-expect-error\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      // @ts-expect-error refine typings\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return super.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Node {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(\n          // @ts-expect-error todo(flow->ts)\n          node,\n        );\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate as N.TsThisType;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate as N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation():\n      | N.TsTypeAnnotation\n      | undefined\n      | null {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined | null {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): N.TsType | undefined | null {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined | null {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | undefined | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers.bind(this),\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined | null {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\" as const;\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return super.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined | null {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n    ): N.Declaration | undefined | null {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod = node as Undone<N.TsModuleDeclaration>;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined | null =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(\n            startPos,\n            startLoc,\n          );\n          node.typeParameters = this.tsParseTypeParameters();\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: boolean | undefined | null,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: N.Accessibility | undefined | null;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified: ModifierBase = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if (\n          // @ts-expect-error\n          node.declare\n        ) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | undefined | null>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression = this.startNodeAt<N.TsNonNullExpression>(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n              startPos,\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<N.CallExpression>(startPos, startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              // @ts-expect-error\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(\n            startPos,\n            startLoc,\n          );\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              { at: this.state.startLoc },\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node = this.startNodeAt<N.TsAsExpression>(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n          );\n        }\n      }\n\n      const importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: Undone<N.Node>): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        //\n        // If a const declaration has no type annotation and is initiailized to\n        // a string literal, numeric literal, or enum reference, then it is\n        // allowed. In an ideal world, we'd check whether init was *actually* an\n        // enum reference, but we allow anything that \"could be\" a literal enum\n        // in `isPossiblyLiteralEnum` since we don't have all the information\n        // that the typescript compiler has.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          init.type !== \"StringLiteral\" &&\n          init.type !== \"BooleanLiteral\" &&\n          init.type !== \"NumericLiteral\" &&\n          init.type !== \"BigIntLiteral\" &&\n          (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) &&\n          !isPossiblyLiteralEnum(init)\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      context?: string | null,\n      topLevel?: boolean | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        disallowedModifiers: [\"in\", \"out\"],\n        stopOnStartOfClassStaticBlock: true,\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          super.parseClassStaticBlock(\n            classBody,\n            member as any as N.StaticBlock,\n          );\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingTypes,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // @ts-expect-error\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // @ts-expect-error\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        // @ts-expect-error refine typings\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startPos: number | undefined | null,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ) {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n                at: createPositionWithColumnOffset(parameter.loc.end, 1),\n                typeParameterName: parameter.name.name,\n              });\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n      }\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParemeterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    // @ts-expect-error plugin overrides interfaces\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSAsExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: typeof charCodes[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startPos?: number | null,\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(\n            expr as N.TsTypeCastExpression,\n          );\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          // @ts-expect-error: refine typings\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        // @ts-expect-error: refine typings\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          node as N.ClassDeclaration,\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(node[rightOfAsKey], BIND_LEXICAL);\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type { BindingTypes } from \"../util/scopeflags\";\nimport type { Position } from \"../util/location\";\n\ntype PossiblePlaceholedrs = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholedrs;\n\ntype NodeOf<T extends keyof PossiblePlaceholedrs> = PossiblePlaceholedrs[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\n/* eslint-disable sort-keys */\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined | null {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        // @ts-expect-error placeholder typings\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      // @ts-expect-error todo(flow->ts)\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context?: string | null): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(node);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport type { ExpressionErrors } from \"../parser/util\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"./typings\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (superClass: { new (...args: any): Parser }) => {\n  new (...args: any): Parser;\n};\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        // @ts-expect-error key may not exist in plugin options\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption<\n  PluginName extends ParserPluginWithOptions[0],\n  OptionName extends keyof PluginOptions<PluginName>,\n>(plugins: PluginList, name: PluginName, option: OptionName) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return (plugin[1] as PluginOptions<PluginName>)[option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","import type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType;\n  sourceFilename?: string;\n  startColumn: number;\n  startLine: number;\n  allowAwaitOutsideFunction: boolean;\n  allowReturnOutsideFunction: boolean;\n  allowImportExportEverywhere: boolean;\n  allowSuperOutsideMethod: boolean;\n  allowUndeclaredExports: boolean;\n  plugins: PluginList;\n  strictMode: boolean | undefined | null;\n  ranges: boolean;\n  tokens: boolean;\n  createParenthesizedExpressions: boolean;\n  errorRecovery: boolean;\n  attachComment: boolean;\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    // @ts-expect-error key may not exist in opts\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayExpression,\n  ArrayPattern,\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils, type Undone } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\nimport type Parser from \"./index\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startPos: number | null,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): Expression | Identifier;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression.\n   *                                If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *                                If isLHS is `false`, we are in an arrow function parameters list.\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParemeterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParemeterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return (node.properties as ObjectExpression[\"properties\"]).every(\n          (prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type !== \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          },\n        );\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return (node as ArrayExpression).elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ): ReadonlyArray<Expression | undefined | null> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: typeof charCodes[keyof typeof charCodes],\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): Array<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): ObjectMember | RestElement {\n    const prop = this.startNode<ObjectMember | RestElement>();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop as Undone<RestElement>);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      (prop as Undone<ObjectMember>).key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop as Undone<ObjectMember>);\n    }\n    (prop as Undone<ObjectMember>).method = false;\n    return this.parseObjPropValue(\n      prop as Undone<ObjectMember>,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    allowModifiers: boolean | undefined | null,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startPos?: number | null,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param {NodeType} type A Node `type` string\n   * @param {boolean} isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param {BindingTypes} binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns { boolean | string | [string, boolean] }\n   *          `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingTypes,\n  ): string | boolean {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      // @ts-expect-error refine string to enum\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param {Expression} expression The expression in question to check.\n   * @param {Object} options A set of options described below.\n   * @param {LValAncestor} options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param {BindingTypes} [options.binding=BIND_NONE]\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param {Set<string>|false} [options.checkClashes=false]\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param {boolean} [options.allowingSloppyLetBinding]\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param {boolean} [options.strictModeChanged=false]\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param {boolean} [options.hasParenthesizedAncestor=false]\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   * @memberof LValParser\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor;\n      binding?: BindingTypes;\n      checkClashes?: Set<string> | false;\n      strictModeChanged?: boolean;\n      allowingSloppyLetBinding?: boolean;\n      hasParenthesizedAncestor?: boolean;\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression as Identifier,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression as Identifier;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // Flow has difficulty tracking `key` and `expression`, but only if we use\n    // null-proto objects. If we use normal objects, everything works fine.\n    // @ts-expect-error\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          // @ts-expect-error: refine types\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(\n    close: typeof charCodes[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport type { ParamKind } from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \".\";\n\nimport type { SourceType } from \"../options\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(\n    node: N.Function,\n    allowModifiers?: boolean,\n  ): void;\n  abstract takeDecorators(node: N.HasDecorators): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // @ts-expect-error\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    // @ts-expect-error fixme: refine types\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startPos\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(\n          finishedNode,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        // @ts-expect-error TS2322: Type 'string' is not assignable to type '\"AssignmentExpression\" | \"ArrowFunctionExpression\" | \"ConditionalExpression\" | \"YieldExpression\"'.\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      // @ts-expect-error Type 'Node' is missing the following properties from type 'Undone<UpdateExpression>': prefix, operator, argument\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startPos,\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startPos, startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode<N.Class>();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: Undone<N.Node>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: Undone<N.MetaProperty>): N.MetaProperty {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList: N.Expression[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(\n      startPos,\n      startLoc,\n    );\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(\n        innerStartPos,\n        innerStartLoc,\n      );\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startPos,\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(\n    startPos: number,\n    startLoc: Position,\n    expression: N.Expression,\n  ): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        expression,\n        startPos,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression = this.startNodeAt<N.ParenthesizedExpression>(\n      startPos,\n      startLoc,\n    );\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startPos: number,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: explain\n          at: createPositionWithColumnOffset(startLoc, 2),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // @ts-expect-error\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: Undone<N.ObjectProperty>): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startPos: number | undefined | null,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    this: Parser,\n    prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n    startPos: number | undefined | null,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMethod | N.ObjectProperty {\n    const node =\n      this.parseObjectMethod(\n        prop as Undone<N.ObjectMethod>,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(\n    node: N.BodilessFunctionOrMethodBase,\n    isAsync?: boolean | null,\n  ): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[] | undefined | null,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[],\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        (this.prodParam.currentFlags() | PARAM_RETURN) as ParamKind,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // @ts-expect-error\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error\n                !!node.key\n                  ? // @ts-expect-error node.key has been gaurded\n                    node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(\n    this: Parser,\n    startPos: number,\n    startLoc: Position,\n  ): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(\n        startPos,\n        startLoc,\n      );\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(\n        startPos,\n        startLoc,\n      );\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \"./index\";\n\nconst loopLabel = { kind: \"loop\" } as const,\n  switchLabel = { kind: \"switch\" } as const;\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(this: Parser, file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    return this.finishNode(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context?: string | null): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context?: string | null): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(\n    this: Parser,\n    context?: string | null,\n    topLevel?: boolean,\n  ): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    context?: string | null,\n    topLevel?: boolean | null,\n  ): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !context,\n        );\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node as Undone<N.ClassDeclaration>, true);\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !context,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        // @ts-expect-error migrate to Babel types\n        expr,\n        context,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startPos, startLoc, expr);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const initNode = this.startNode<N.VariableDeclaration>();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(initNode, true, kind);\n      const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    context?: string | null,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\",\n  ): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    statement: number = FUNC_NO_FLAGS,\n    isAsync: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowModifiers?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body: N.Node[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = prop.key as N.Expression;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<\n      N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod\n    >,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n  ): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar =\n      parseAfterDefault &&\n      this.eatExportStar(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const hasNamespace =\n      hasStar &&\n      this.maybeParseExportNamespaceSpecifier(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node as Undone<N.ExportNamedDeclaration>, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(\n        node as Undone<N.ExportNamedDeclaration>,\n        true,\n        false,\n        !!(node as Undone<N.ExportNamedDeclaration>).source,\n      );\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      (node as Undone<N.ExportDefaultDeclaration>).declaration =\n        this.parseExportDefaultExpression();\n      this.checkExport(node as Undone<N.ExportDefaultDeclaration>, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(this: Parser): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr as Undone<N.FunctionExpression>,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    return this.parseStatement(null) as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n        this.checkJSONModuleImport(node);\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<N.ExportNamedDeclaration | N.ExportDefaultDeclaration>,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error\n      const { specifiers } = node;\n      // @ts-expect-error\n      if (node.specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start,\n          });\n        }\n      }\n    }\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        // @ts-expect-error attributes have been deprecated\n        node.attributes = attributes;\n      }\n    }\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldParseDefaultImport(node: Undone<N.ImportDeclaration>): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(specifier: Undone<T>, type: T[\"type\"]) {\n    this.checkLVal(specifier.local, {\n      // @ts-expect-error refine types\n      in: specifier,\n      binding: BIND_LEXICAL,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(options: Options | undefined | null, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): {\n    new (...args: any): ScopeHandler;\n  } {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode() as N.File;\n    const program = this.startNode() as N.Program;\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","import { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings\";\nimport Parser from \"./parser\";\n\nimport {\n  ExportedTokenType,\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"],"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCode","reflect","keys","last","length","get","reduce","object","key","set","value","item","i","instantiate","properties","descriptors","Object","map","filter","descriptor","enumerable","split","instance","defineProperty","configurable","assign","ImportMetaOutsideModule","message","code","SourceTypeModuleError","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","toMessage","_excluded","loc","details","SyntaxError","clone","overrides","pos","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","parseErrorTemplates","ParseErrorConstructors","reasonCode","template","rest","_excluded2","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors","toUnenumerable","toESTreeLocation","node","superClass","ESTreeParserMixin","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","args","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","at","finishCallExpression","unfinished","optional","callee","source","arguments","hasPlugin","attributes","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","state","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","endLoc","resetStartLocation","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","containsInvalid","chunkStart","unterminated","isStringEnd","escaped","readEscapedChar","str","inTemplate","throwOnInvalid","res","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","match","octalStr","octal","parseInt","len","forceLen","n","readInt","invalidEscapeSequence","allowNumSeparator","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","invalidDigit","indexOf","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorRecovery","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","attachComment","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","inClass","content","mods","char","includes","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","quote","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParemeterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","FlowParserMixin","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","getOwn","hasOwnProperty","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","CannotFindName","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","TypeScriptParserMixin","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","errorTemplate","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseInOutModifiers","tsParseNoneModifiers","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","typeReference","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","checkType","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","parseObjectLike","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","checkIdentifier","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","isSimpleParameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","expressions","isPossiblyLiteralEnum","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","reportReservedArrowTypeParam","trailingComma","sawUnary","toAssignableParenthesizedExpression","checkToRestConversion","allowPattern","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSTypeAssertion","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isUncomputedMemberExpressionChain","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","PlaceholdersParserMixin","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","isBreak","parseBlock","createNewLexicalScope","parseFunctionId","requireId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","arg","toReferencedListDeep","parseSpread","parseRestBinding","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","ObjectProperty","checkLVal","in","checkClashes","allowingSloppyLetBinding","hasParenthesizedAncestor","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","allowLetBinding","declareNameFromIdentifier","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","innerStartPos","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartPos","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","initNode","parseVar","parseForIn","startsWithAsync","isForOf","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","parsedNonDirective","isForIn","await","isFor","statement","isHangingStatement","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","parseClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkJSONModuleImport","checkNames","isDefault","isFrom","nodes","surrogate","isJSONModuleImport","nonDefaultNamedSpecifier","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}