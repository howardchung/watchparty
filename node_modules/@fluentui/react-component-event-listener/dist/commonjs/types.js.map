{"version":3,"file":"types.js","names":[],"sources":["types.ts"],"sourcesContent":["import * as React from 'react';\n\nexport interface EventListenerOptions<T extends EventTypes = 'click'> {\n  /** Indicating that events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree. */\n  capture?: boolean;\n\n  /** A function which receives a notification when an event of the specified type occurs. */\n  listener: EventHandler<T>;\n\n  /** A target node. Use `target` or `targetRef` prop. */\n  target?: Target;\n\n  /** A ref object with a target node. */\n  targetRef?: TargetRef;\n\n  /** A case-sensitive string representing the event type to listen for. */\n  type: T;\n}\n\nexport type EventHandler<T extends EventTypes> = (e: DocumentEventMap[T]) => void;\nexport type EventTypes = keyof DocumentEventMap;\n\nexport type Target = Node | Window;\nexport type TargetRef = React.RefObject<Target>;\n"],"mappings":""}