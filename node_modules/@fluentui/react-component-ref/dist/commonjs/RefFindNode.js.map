{"version":3,"file":"RefFindNode.js","names":["isFiberRef","node","Element","Text","type","tag","RefFindNode","prevNode","componentDidMount","currentNode","ReactDOM","findDOMNode","process","env","NODE_ENV","handleRef","props","innerRef","componentDidUpdate","prevProps","componentWillUnmount","render","children","React","Component"],"sources":["RefFindNode.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { handleRef, RefProps } from './utils';\n\n// ========================================================\n// react/packages/react-reconciler/src/ReactFiber.js\n// ========================================================\n\ntype Fiber = {\n  // Tag identifying the type of fiber.\n  tag: string;\n  // The resolved function/class/ associated with this fiber.\n  type: any;\n};\n\n/**\n * Detects if a passed element is a Fiber object instead of an element. Is needed as `ReactDOM.findDOMNode()` returns\n * a Fiber in `react-test-renderer` that can cause issues with tests. Is used only in non-production env.\n *\n * @see https://github.com/facebook/react/issues/7371#issuecomment-317396864\n * @see https://github.com/Semantic-Org/Semantic-UI-React/issues/4061#issuecomment-694895617\n */\nfunction isFiberRef(node: Element | Fiber | Text | null): boolean {\n  if (node === null) {\n    return false;\n  }\n\n  if (node instanceof Element || node instanceof Text) {\n    return false;\n  }\n\n  return !!(node.type && node.tag);\n}\n\nexport class RefFindNode extends React.Component<RefProps> {\n  prevNode?: Node | null;\n\n  componentDidMount() {\n    let currentNode = ReactDOM.findDOMNode(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFiberRef(currentNode)) {\n        currentNode = null;\n      }\n    }\n\n    this.prevNode = currentNode;\n    handleRef(this.props.innerRef, currentNode);\n  }\n\n  componentDidUpdate(prevProps: RefProps) {\n    let currentNode = ReactDOM.findDOMNode(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFiberRef(currentNode)) {\n        currentNode = null;\n      }\n    }\n\n    if (this.prevNode !== currentNode) {\n      this.prevNode = currentNode;\n      handleRef(this.props.innerRef, currentNode);\n    }\n\n    if (prevProps.innerRef !== this.props.innerRef) {\n      handleRef(this.props.innerRef, currentNode);\n    }\n  }\n\n  componentWillUnmount() {\n    handleRef(this.props.innerRef, null);\n\n    delete this.prevNode;\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return children;\n  }\n}\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,CAAoBC,IAApB,EAAkE;EAChE,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACjB,OAAO,KAAP;EACD;;EAED,IAAIA,IAAI,YAAYC,OAAhB,IAA2BD,IAAI,YAAYE,IAA/C,EAAqD;IACnD,OAAO,KAAP;EACD;;EAED,OAAO,CAAC,EAAEF,IAAI,CAACG,IAAL,IAAaH,IAAI,CAACI,GAApB,CAAR;AACD;;IAEYC,W;;;;;;;;;;;UACXC,Q;;;;;;SAEAC,iB,GAAA,6BAAoB;IAClB,IAAIC,WAAW,GAAGC,QAAQ,CAACC,WAAT,CAAqB,IAArB,CAAlB;;IAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzC,IAAId,UAAU,CAACS,WAAD,CAAd,EAA6B;QAC3BA,WAAW,GAAG,IAAd;MACD;IACF;;IAED,KAAKF,QAAL,GAAgBE,WAAhB;IACA,IAAAM,gBAAA,EAAU,KAAKC,KAAL,CAAWC,QAArB,EAA+BR,WAA/B;EACD,C;;SAEDS,kB,GAAA,4BAAmBC,SAAnB,EAAwC;IACtC,IAAIV,WAAW,GAAGC,QAAQ,CAACC,WAAT,CAAqB,IAArB,CAAlB;;IAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzC,IAAId,UAAU,CAACS,WAAD,CAAd,EAA6B;QAC3BA,WAAW,GAAG,IAAd;MACD;IACF;;IAED,IAAI,KAAKF,QAAL,KAAkBE,WAAtB,EAAmC;MACjC,KAAKF,QAAL,GAAgBE,WAAhB;MACA,IAAAM,gBAAA,EAAU,KAAKC,KAAL,CAAWC,QAArB,EAA+BR,WAA/B;IACD;;IAED,IAAIU,SAAS,CAACF,QAAV,KAAuB,KAAKD,KAAL,CAAWC,QAAtC,EAAgD;MAC9C,IAAAF,gBAAA,EAAU,KAAKC,KAAL,CAAWC,QAArB,EAA+BR,WAA/B;IACD;EACF,C;;SAEDW,oB,GAAA,gCAAuB;IACrB,IAAAL,gBAAA,EAAU,KAAKC,KAAL,CAAWC,QAArB,EAA+B,IAA/B;IAEA,OAAO,KAAKV,QAAZ;EACD,C;;SAEDc,M,GAAA,kBAAS;IACP,IAAQC,QAAR,GAAqB,KAAKN,KAA1B,CAAQM,QAAR;IAEA,OAAOA,QAAP;EACD,C;;;EA7C8BC,KAAK,CAACC,S"}