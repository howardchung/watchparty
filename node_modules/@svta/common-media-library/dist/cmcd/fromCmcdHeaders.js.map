{"version":3,"file":"fromCmcdHeaders.js","sourceRoot":"","sources":["../../src/cmcd/fromCmcdHeaders.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AACnD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAExC;;;;;;;;;;GAUG;AACH,MAAM,UAAU,eAAe,CAAC,OAAyC;IACxE,IAAI,CAAC,CAAC,OAAO,YAAY,OAAO,CAAC,EAAE,CAAC;QACnC,OAAO,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC/B,MAAM,KAAK,GAAI,OAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC5C,OAAO,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC,KAAe,CAAC,CAAC,CAAC;IACxD,CAAC,EAAE,EAAU,CAAC,CAAC;AAChB,CAAC","sourcesContent":["import type { Cmcd } from './Cmcd.js';\nimport { CmcdHeaderMap } from './CmcdHeaderMap.js';\nimport { decodeCmcd } from './decodeCmcd.js';\n\nconst keys = Object.keys(CmcdHeaderMap);\n\n/**\n * Decode CMCD data from request headers.\n *\n * @param headers - The request headers to decode.\n *\n * @returns The decoded CMCD data.\n *\n * @group CMCD\n *\n * @beta\n */\nexport function fromCmcdHeaders(headers: Record<string, string> | Headers): Cmcd {\n\tif (!(headers instanceof Headers)) {\n\t\theaders = new Headers(headers);\n\t}\n\n\treturn keys.reduce((acc, key) => {\n\t\tconst value = (headers as Headers).get(key);\n\t\treturn Object.assign(acc, decodeCmcd(value as string));\n\t}, {} as Cmcd);\n}\n"]}