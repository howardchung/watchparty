{"version":3,"file":"toCmcdJson.js","sourceRoot":"","sources":["../../src/cmcd/toCmcdJson.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,6BAA6B,CAAC;AAC1D,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AAGxD,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErD;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,UAAU,CAAC,IAAU,EAAE,OAA2B;IACjE,MAAM,IAAI,GAAG,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAExC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,YAAY,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AAC/H,CAAC","sourcesContent":["import { symbolToStr } from '../cta/utils/symbolToStr.js';\nimport { SfToken } from '../structuredfield/SfToken.js';\nimport type { Cmcd } from './Cmcd.js';\nimport type { CmcdEncodeOptions } from './CmcdEncodeOptions.js';\nimport { processCmcd } from './utils/processCmcd.js';\n\n/**\n * Convert a CMCD data object to JSON.\n *\n * @param cmcd - The CMCD object to convert.\n * @param options - Options for encoding the CMCD object.\n *\n * @returns The CMCD JSON.\n *\n * @group CMCD\n *\n * @beta\n */\nexport function toCmcdJson(cmcd: Cmcd, options?: CmcdEncodeOptions): string {\n\tconst data = processCmcd(cmcd, options);\n\n\treturn JSON.stringify(data, (_, value) => typeof value === 'symbol' || value instanceof SfToken ? symbolToStr(value) : value);\n}\n"]}