{"version":3,"file":"processCmcd.js","sourceRoot":"","sources":["../../../src/cmcd/utils/processCmcd.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAC/D,OAAO,EAAE,OAAO,EAAE,MAAM,4BAA4B,CAAC;AACrD,OAAO,EAAE,OAAO,EAAE,MAAM,kCAAkC,CAAC;AAG3D,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAItD;;;;;;;;;;GAUG;AACH,MAAM,UAAU,WAAW,CAAC,GAA4B,EAAE,OAA2B;IACpF,MAAM,OAAO,GAAS,EAAE,CAAC;IAEzB,IAAI,GAAG,IAAI,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;QAC5C,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAe,CAAC;IAClD,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,cAAc,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,CAAC,CAAC;IAC1E,MAAM,MAAM,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,CAAC;IAE/B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAClB,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAG,GAAG,CAAC,EAAE,CAAC;YACnB,OAAO;QACR,CAAC;QAED,IAAI,KAAK,GAAG,GAAG,CAAC,GAAG,CAAc,CAAC;QAElC,MAAM,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,SAAS,EAAE,CAAC;YACf,KAAK,GAAG,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACnC,CAAC;QAED,qDAAqD;QACrD,IAAI,GAAG,KAAK,GAAG,IAAI,KAAK,KAAK,CAAC,EAAE,CAAC;YAChC,OAAO;QACR,CAAC;QAED,uDAAuD;QACvD,IAAI,GAAG,IAAI,IAAI,IAAI,KAAK,KAAK,CAAC,EAAE,CAAC;YAChC,OAAO;QACR,CAAC;QAED,wBAAwB;QACxB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;YACrB,OAAO;QACR,CAAC;QAED,IAAI,YAAY,CAAC,GAAG,CAAC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YACpD,KAAK,GAAG,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC;QAED,OAAO,CAAC,GAAU,CAAC,GAAG,KAAY,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AAChB,CAAC","sourcesContent":["import { isTokenField } from '../../cta/utils/isTokenField.js';\nimport { isValid } from '../../cta/utils/isValid.js';\nimport { SfToken } from '../../structuredfield/SfToken.js';\nimport type { Cmcd } from '../Cmcd.js';\nimport type { CmcdEncodeOptions } from '../CmcdEncodeOptions.js';\nimport { CmcdFormatters } from '../CmcdFormatters.js';\nimport type { CmcdKey } from '../CmcdKey.js';\nimport type { CmcdValue } from '../CmcdValue.js';\n\n/**\n * Internal CMCD processing function.\n *\n * @param obj - The CMCD object to process.\n * @param map - The mapping function to use.\n * @param options - Options for encoding.\n *\n * @internal\n *\n * @group CMCD\n */\nexport function processCmcd(obj: Cmcd | null | undefined, options?: CmcdEncodeOptions): Cmcd {\n\tconst results: Cmcd = {};\n\n\tif (obj == null || typeof obj !== 'object') {\n\t\treturn results;\n\t}\n\n\tconst keys = Object.keys(obj).sort() as CmcdKey[];\n\tconst formatters = Object.assign({}, CmcdFormatters, options?.formatters);\n\tconst filter = options?.filter;\n\n\tkeys.forEach(key => {\n\t\tif (filter?.(key)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet value = obj[key] as CmcdValue;\n\n\t\tconst formatter = formatters[key];\n\t\tif (formatter) {\n\t\t\tvalue = formatter(value, options);\n\t\t}\n\n\t\t// Version should only be reported if not equal to 1.\n\t\tif (key === 'v' && value === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Playback rate should only be sent if not equal to 1.\n\t\tif (key == 'pr' && value === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t// ignore invalid values\n\t\tif (!isValid(value)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (isTokenField(key) && typeof value === 'string') {\n\t\t\tvalue = new SfToken(value);\n\t\t}\n\n\t\tresults[key as any] = value as any;\n\t});\n\n\treturn results;\n}\n"]}