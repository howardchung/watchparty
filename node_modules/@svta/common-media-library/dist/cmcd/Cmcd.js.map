{"version":3,"file":"Cmcd.js","sourceRoot":"","sources":["../../src/cmcd/Cmcd.ts"],"names":[],"mappings":"","sourcesContent":["import type { CmcdCustomKey } from './CmcdCustomKey.js';\nimport type { CmcdObjectType } from './CmcdObjectType.js';\nimport type { CmcdStreamType } from './CmcdStreamType.js';\nimport type { CmcdStreamingFormat } from './CmcdStreamingFormat.js';\nimport type { CmcdValue } from './CmcdValue.js';\n\n/**\n * Common Media Client Data (CMCD) is a standardized set of HTTP request header fields and query string parameters.\n *\n * @see {@link https://cdn.cta.tech/cta/media/media/resources/standards/pdfs/cta-5004-final.pdf|CMCD Spec}\n *\n * @group CMCD\n *\n * @beta\n */\nexport type Cmcd = {\n\n\t/**\n\t * Custom key names may be used, but they MUST carry a hyphenated prefix to ensure that there will not be a namespace collision\n\t * with future revisions to this specification. Clients SHOULD use a reverse-DNS syntax when defining their own prefix.\n\t */\n\t[index: CmcdCustomKey]: CmcdValue;\n\n\t/////////////////\n\t// CMCD Object //\n\t/////////////////\n\n\t/**\n\t * Encoded bitrate\n\t *\n\t * The encoded bitrate of the audio or video object being requested. This may not be known precisely by the player; however,\n\t * it MAY be estimated based upon playlist/manifest declarations. If the playlist declares both peak and average bitrate values,\n\t * the peak value should be transmitted.\n\t *\n\t * Integer kbps\n\t */\n\tbr?: number;\n\n\t/**\n\t * Object duration\n\t *\n\t * The playback duration in milliseconds of the object being requested. If a partial segment is being requested, then this value\n\t * MUST indicate the playback duration of that part and not that of its parent segment. This value can be an approximation of the\n\t * estimated duration if the explicit value is not known.\n\t *\n\t * Integer milliseconds\n\t */\n\td?: number;\n\n\t/**\n\t * Object type\n\t *\n\t * The media type of the current object being requested:\n\t * - `m` = text file, such as a manifest or playlist\n\t * - `a` = audio only\n\t * - `v` = video only\n\t * - `av` = muxed audio and video\n\t * - `i` = init segment\n\t * - `c` = caption or subtitle\n\t * - `tt` = ISOBMFF timed text track\n\t * - `k` = cryptographic key, license or certificate.\n\t * - `o` = other\n\t *\n\t * If the object type being requested is unknown, then this key MUST NOT be used.\n\t */\n\tot?: CmcdObjectType;\n\n\t/**\n\t * Top bitrate\n\t *\n\t * The highest bitrate rendition in the manifest or playlist that the client is allowed to play, given current codec, licensing and\n\t * sizing constraints.\n\t *\n\t * Integer Kbps\n\t */\n\ttb?: number;\n\n\t//////////////////\n\t// CMCD Request //\n\t//////////////////\n\t/**\n\t * Buffer length\n\t *\n\t * The buffer length associated with the media object being requested. This value MUST be rounded to the nearest 100 ms. This key SHOULD only be\n\t * sent with an object type of ‘a’, ‘v’ or ‘av’.\n\t *\n\t * Integer milliseconds\n\t */\n\tbl?: number;\n\n\t/**\n\t * Deadline\n\t *\n\t * Deadline from the request time until the first sample of this Segment/Object needs to be available in order to not create a buffer underrun or\n\t * any other playback problems. This value MUST be rounded to the nearest 100ms. For a playback rate of 1, this may be equivalent to the player’s\n\t * remaining buffer length.\n\t *\n\t * Integer milliseconds\n\t */\n\tdl?: number;\n\n\t/**\n\t * Measured mtp CMCD throughput\n\t *\n\t * The throughput between client and server, as measured by the client and MUST be rounded to the nearest 100 kbps. This value, however derived,\n\t * SHOULD be the value that the client is using to make its next Adaptive Bitrate switching decision. If the client is connected to multiple\n\t * servers concurrently, it must take care to report only the throughput measured against the receiving server. If the client has multiple concurrent\n\t * connections to the server, then the intent is that this value communicates the aggregate throughput the client sees across all those connections.\n\t *\n\t * Integer kbps\n\t */\n\tmtp?: number;\n\n\t/**\n\t * Next object request\n\t *\n\t * Relative path of the next object to be requested. This can be used to trigger pre-fetching by the CDN. This MUST be a path relative to the current\n\t * request. This string MUST be URLEncoded. The client SHOULD NOT depend upon any pre-fetch action being taken - it is merely a request for such a\n\t * pre-fetch to take place.\n\t *\n\t * String\n\t */\n\tnor?: string;\n\n\t/**\n\t * Next range request\n\t *\n\t * If the next request will be a partial object request, then this string denotes the byte range to be requested. If the ‘nor’ field is not set, then the\n\t * object is assumed to match the object currently being requested. The client SHOULD NOT depend upon any pre-fetch action being taken – it is merely a\n\t * request for such a pre-fetch to take place. Formatting is similar to the HTTP Range header, except that the unit MUST be ‘byte’, the ‘Range:’ prefix is\n\t * NOT required and specifying multiple ranges is NOT allowed. Valid combinations are:\n\t *\n\t * - `\"\\<range-start\\>-\"`\n\t * - `\"\\<range-start\\>-\\<range-end\\>\"`\n\t * - `\"-\\<suffix-length\\>\"`\n\t *\n\t * String\n\t */\n\tnrr?: string;\n\n\t/**\n\t * Startup\n\t *\n\t * Key is included without a value if the object is needed urgently due to startup, seeking or recovery after a buffer-empty event. The media SHOULD not be\n\t * rendering when this request is made. This key MUST not be sent if it is FALSE.\n\t *\n\t * Boolean\n\t */\n\tsu?: boolean;\n\n\t//////////////////\n\t// CMCD Session //\n\t//////////////////\n\n\t/**\n\t * Content ID\n\t *\n\t * A unique string identifying the current content. Maximum length is 64 characters. This value is consistent across multiple different\n\t * sessions and devices and is defined and updated at the discretion of the service provider.\n\t *\n\t * String\n\t */\n\tcid?: string;\n\n\t/**\n\t * Playback rate\n\t *\n\t * `1` if real-time, `2` if double speed, `0` if not playing. SHOULD only be sent if not equal to `1`.\n\t *\n\t * Decimal\n\t */\n\tpr?: number;\n\n\t/**\n\t * Streaming format\n\t *\n\t * The streaming format that defines the current request.\n\t *\n\t * - `d` = MPEG DASH\n\t * - `h` = HTTP Live Streaming (HLS)\n\t * - `s` = Smooth Streaming\n\t * - `o` = other\n\t *\n\t * If the streaming format being requested is unknown, then this key MUST NOT be used.\n\t */\n\tsf?: CmcdStreamingFormat;\n\n\t/**\n\t * Session ID\n\t *\n\t * A GUID identifying the current playback session. A playback session typically ties together segments belonging to a single media asset.\n\t * Maximum length is 64 characters. It is RECOMMENDED to conform to the UUID specification.\n\t *\n\t * String\n\t */\n\tsid?: string;\n\n\t/**\n\t * Stream type\n\t * - `v` = all segments are available – e.g., VOD\n\t * - `l` = segments become available over time – e.g., LIVE\n\t */\n\tst?: CmcdStreamType;\n\n\t/**\n\t * CMCD version\n\t *\n\t * The version of this specification used for interpreting the defined key names and values. If this key is omitted, the client and server MUST\n\t * interpret the values as being defined by version 1. Client SHOULD omit this field if the version is 1.\n\t *\n\t * Integer\n\t */\n\tv?: number;\n\n\t/////////////////\n\t// CMCD Status //\n\t/////////////////\n\n\t/**\n\t * Buffer starvation\n\t *\n\t * Key is included without a value if the buffer was starved at some point between the prior request and this object request,\n\t * resulting in the player being in a rebuffering state and the video or audio playback being stalled. This key MUST NOT be\n\t * sent if the buffer was not starved since the prior request.\n\t *\n\t * If the object type `ot` key is sent along with this key, then the `bs` key refers to the buffer associated with the particular\n\t * object type. If no object type is communicated, then the buffer state applies to the current session.\n\t *\n\t * Boolean\n\t */\n\tbs?: boolean;\n\n\t/**\n\t * Requested maximum throughput\n\t *\n\t * The requested maximum throughput that the client considers sufficient for delivery of the asset. Values MUST be rounded to the\n\t * nearest 100kbps. For example, a client would indicate that the current segment, encoded at 2Mbps, is to be delivered at no more\n\t * than 10Mbps, by using rtp=10000.\n\t *\n\t * Note: This can benefit clients by preventing buffer saturation through over-delivery and can also deliver a community benefit\n\t * through fair-share delivery. The concept is that each client receives the throughput necessary for great performance, but no more.\n\t * The CDN may not support the rtp feature.\n\t *\n\t * Integer kbps\n\t */\n\trtp?: number;\n};\n"]}