{"version":3,"file":"extractCta608Data.js","sourceRoot":"","sources":["../../../src/cta/608/extractCta608Data.ts"],"names":[],"mappings":"AAAA;;;;;;;;;GASG;AACH,MAAM,UAAU,iBAAiB,CAAC,GAAa,EAAE,WAA0B;IAC1E,IAAI,GAAG,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;IACzB,MAAM,SAAS,GAAe,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAEvC,GAAG,IAAI,CAAC,CAAC,CAAC,6CAA6C;IACvD,MAAM,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;IACvC,GAAG,IAAI,CAAC,CAAC,CAAC,mCAAmC;IAE7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC;QAClC,MAAM,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC/B,MAAM,OAAO,GAAG,IAAI,GAAG,CAAC,CAAC;QACzB,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,CAAC;QACxB,GAAG,EAAE,CAAC;QACN,MAAM,OAAO,GAAW,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,kBAAkB;QAC7D,GAAG,EAAE,CAAC;QACN,MAAM,OAAO,GAAW,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,kBAAkB;QAC7D,GAAG,EAAE,CAAC;QACN,IAAI,OAAO,IAAI,CAAC,CAAC,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,mCAAmC;YAC9F,IAAI,MAAM,KAAK,CAAC,EAAE,CAAC;gBAClB,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC3B,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC5B,CAAC;iBACI,IAAI,MAAM,KAAK,CAAC,EAAE,CAAC;gBACvB,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC3B,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC5B,CAAC;QACF,CAAC;IACF,CAAC;IACD,OAAO,SAAS,CAAC;AAClB,CAAC","sourcesContent":["/**\n * Extract CTA-608 data from a DataView\n *\n * @param raw - The DataView to extract the data from\n * @param cta608Range - The range of the CTA-608 data\n * @returns The extracted CTA-608 data\n *\n * @group CTA-608\n * @beta\n */\nexport function extractCta608Data(raw: DataView, cta608Range: Array<number>): Array<Array<number>> {\n\tlet pos = cta608Range[0];\n\tconst fieldData: number[][] = [[], []];\n\n\tpos += 8; // Skip the identifier up to userDataTypeCode\n\tconst ccCount = raw.getUint8(pos) & 31;\n\tpos += 2; // Advance 1 and skip reserved byte\n\n\tfor (let i = 0; i < ccCount; i++) {\n\t\tconst byte = raw.getUint8(pos);\n\t\tconst ccValid = byte & 4;\n\t\tconst ccType = byte & 3;\n\t\tpos++;\n\t\tconst ccData1: number = raw.getUint8(pos); // Keep parity bit\n\t\tpos++;\n\t\tconst ccData2: number = raw.getUint8(pos); // Keep parity bit\n\t\tpos++;\n\t\tif (ccValid && ((ccData1 & 127) + (ccData2 & 127) !== 0)) { //Check validity and non-empty data\n\t\t\tif (ccType === 0) {\n\t\t\t\tfieldData[0].push(ccData1);\n\t\t\t\tfieldData[0].push(ccData2);\n\t\t\t}\n\t\t\telse if (ccType === 1) {\n\t\t\t\tfieldData[1].push(ccData1);\n\t\t\t\tfieldData[1].push(ccData2);\n\t\t\t}\n\t\t}\n\t}\n\treturn fieldData;\n}\n"]}