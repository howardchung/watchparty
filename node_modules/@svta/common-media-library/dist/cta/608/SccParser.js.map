{"version":3,"file":"SccParser.js","sourceRoot":"","sources":["../../../src/cta/608/SccParser.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AAEH;;;;;GAKG;AACH,MAAM,OAAO,SAAS;IAMrB,YAAY,SAAc,EAAE,QAAsB,CAAC;QALnD,cAAS,GAAY,KAAK,CAAC;QAC3B,kBAAa,GAAW,CAAC,CAAC;QAKzB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,IAAY;QACjB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAClC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QAEvB,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,oBAAoB,EAAE,CAAC;YACvC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,aAAa,EAAE,CAAC;QACtB,CAAC;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;YAC1C,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC;gBACrB,MAAM,CAAE,oCAAoC;YAC7C,CAAC;YACD,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAClD,IAAI,QAAQ,KAAK,IAAI,EAAE,CAAC;gBACvB,MAAM;YACP,CAAC;YACD,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC;IACF,CAAC;IAED,aAAa,CAAC,IAAY;QACzB,IAAI,CAAC,IAAI,EAAE,CAAC;YACX,OAAO,IAAI,CAAC;QACb,CAAC;QAED,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpC,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,OAAO,GAAa,EAAE,CAAC;QAE7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC3C,MAAM,YAAY,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACrD,MAAM,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACrD,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACpB,CAAC;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC1C,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACxB,CAAC;IAED,aAAa,CAAC,OAAe;QAC5B,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACxB,MAAM,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACtC,KAAK,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAC1C,OAAO,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC;QAC9H,CAAC;QACD,OAAO,CAAC,CAAC,CAAE,iCAAiC;IAC7C,CAAC;IAED,eAAe;QACd,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAED,QAAQ;QACP,OAAO,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAED,cAAc;QACb,OAAO,IAAI,CAAC,aAAa,CAAC;IAC3B,CAAC;CACD","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2015-2016, DASH Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  1. Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  2. Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * SCC Parser\n *\n * @group CTA-608\n * @beta\n */\nexport class SccParser {\n\thasHeader: boolean = false;\n\tnrLinesParsed: number = 0;\n\tprocessor: any;\n\tfield: number | any;\n\n\tconstructor(processor: any, field: number | any = 1) {\n\t\tthis.processor = processor;\n\t\tthis.field = field;\n\t}\n\n\tparse(text: string): void {\n\t\tconst lines = text.split(/\\r?\\n/);\n\t\tthis.nrLinesParsed = 0;\n\n\t\tif (lines[0] === 'Scenarist_SCC V1.0') {\n\t\t\tthis.hasHeader = true;\n\t\t\tthis.nrLinesParsed++;\n\t\t}\n\n\t\tfor (let l = 1; l < lines.length; l += 2) {\n\t\t\tif (lines[l] !== '') {\n\t\t\t\tbreak;  // Every second line should be empty\n\t\t\t}\n\t\t\tthis.nrLinesParsed++;\n\t\t\tconst lineData = this.parseDataLine(lines[l + 1]);\n\t\t\tif (lineData === null) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.nrLinesParsed++;\n\t\t\tthis.processor.addData(lineData[0], lineData[1]);\n\t\t}\n\t}\n\n\tparseDataLine(line: string): [number, number[]] | null {\n\t\tif (!line) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst lineParts = line.split(/\\s+/);\n\t\tconst timeData = lineParts[0];\n\t\tconst ceaData: number[] = [];\n\n\t\tfor (let i = 1; i < lineParts.length; i++) {\n\t\t\tconst fourHexChars = lineParts[i];\n\t\t\tconst a = parseInt(fourHexChars.substring(0, 2), 16);\n\t\t\tconst b = parseInt(fourHexChars.substring(2, 4), 16);\n\t\t\tceaData.push(a, b);\n\t\t}\n\n\t\tconst time = this.timeConverter(timeData);\n\t\treturn [time, ceaData];\n\t}\n\n\ttimeConverter(smpteTs: string): number {\n\t\tconst parts = smpteTs.split(':');\n\t\tif (parts.length === 3) {\n\t\t\tconst lastParts = parts[2].split(';');\n\t\t\tparts[2] = lastParts[0];\n\t\t\tconst frames = parseInt(lastParts[1], 10);\n\t\t\treturn (30 * (60 * (60 * parseInt(parts[0], 10) + parseInt(parts[1], 10)) + parseInt(parts[2], 10)) + frames) * 1001 / 30000;\n\t\t}\n\t\treturn 0;  // in case if format is incorrect\n\t}\n\n\tgetHeaderStatus(): boolean {\n\t\treturn this.hasHeader;\n\t}\n\n\tgetField(): number | any {\n\t\treturn this.field;\n\t}\n\n\tgetLinesParsed(): number {\n\t\treturn this.nrLinesParsed;\n\t}\n}\n"]}