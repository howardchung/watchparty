{"version":3,"file":"serializeInnerList.js","sourceRoot":"","sources":["../../../src/structuredfield/serialize/serializeInnerList.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AACnD,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAEvD,sCAAsC;AACtC,EAAE;AACF,qEAAqE;AACrE,qEAAqE;AACrE,iCAAiC;AACjC,EAAE;AACF,oCAAoC;AACpC,EAAE;AACF,yDAAyD;AACzD,EAAE;AACF,2DAA2D;AAC3D,qEAAqE;AACrE,EAAE;AACF,qEAAqE;AACrE,kBAAkB;AAClB,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,0DAA0D;AAC1D,wDAAwD;AACxD,EAAE;AACF,qBAAqB;AACrB,MAAM,UAAU,kBAAkB,CAAC,KAAkB;IACpD,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;AACxF,CAAC","sourcesContent":["import type { SfInnerList } from '../SfInnerList.js';\nimport { serializeItem } from './serializeItem.js';\nimport { serializeParams } from './serializeParams.js';\n\n// 4.1.1.1.  Serializing an Inner List\n//\n// Given an array of (member_value, parameters) tuples as inner_list,\n// and parameters as list_parameters, return an ASCII string suitable\n// for use in a HTTP field value.\n//\n// 1.  Let output be the string \"(\".\n//\n// 2.  For each (member_value, parameters) of inner_list:\n//\n//     1.  Append the result of running Serializing an Item\n//         (Section 4.1.3) with (member_value, parameters) to output.\n//\n//     2.  If more values remain in inner_list, append a single SP to\n//         output.\n//\n// 3.  Append \")\" to output.\n//\n// 4.  Append the result of running Serializing Parameters\n//     (Section 4.1.1.2) with list_parameters to output.\n//\n// 5.  Return output.\nexport function serializeInnerList(value: SfInnerList) {\n\treturn `(${value.value.map(serializeItem).join(' ')})${serializeParams(value.params)}`;\n}\n"]}