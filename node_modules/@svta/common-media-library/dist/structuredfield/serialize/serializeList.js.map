{"version":3,"file":"serializeList.js","sourceRoot":"","sources":["../../../src/structuredfield/serialize/serializeList.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AAEtC,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AACxC,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAC;AAC7D,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAEnD,6BAA6B;AAC7B,EAAE;AACF,qEAAqE;AACrE,iEAAiE;AACjE,EAAE;AACF,qCAAqC;AACrC,EAAE;AACF,yDAAyD;AACzD,EAAE;AACF,oEAAoE;AACpE,2DAA2D;AAC3D,gDAAgD;AAChD,EAAE;AACF,sEAAsE;AACtE,qEAAqE;AACrE,EAAE;AACF,sDAAsD;AACtD,EAAE;AACF,oCAAoC;AACpC,EAAE;AACF,4CAA4C;AAC5C,EAAE;AACF,qBAAqB;AACrB,MAAM,UAAU,aAAa,CAAC,IAAgB,EAAE,UAA2B,EAAE,UAAU,EAAE,IAAI,EAAE;IAC9F,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,KAAK,EAAE,CAAC;QACnC,MAAM,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,MAAM,kBAAkB,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,EAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IAE1D,OAAO,IAAI;SACT,GAAG,CAAC,IAAI,CAAC,EAAE;QACX,IAAI,IAAI,YAAY,MAAM,KAAK,KAAK,EAAE,CAAC;YACtC,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC;QAED,gCAAgC;QAChC,MAAM,CAAC,GAAG,IAAW,CAAC;QACtB,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;YAC5B,OAAO,kBAAkB,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC;QAED,OAAO,aAAa,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC;SACD,IAAI,CAAC,IAAI,kBAAkB,EAAE,CAAC,CAAC;AAClC,CAAC","sourcesContent":["import type { SfEncodeOptions } from '../SfEncodeOptions.js';\nimport { SfItem } from '../SfItem.js';\nimport type { SfMember } from '../SfMember.js';\nimport { LIST } from '../utils/LIST.js';\nimport { serializeError } from './serializeError.js';\nimport { serializeInnerList } from './serializeInnerList.js';\nimport { serializeItem } from './serializeItem.js';\n\n// 4.1.1.  Serializing a List\n//\n// Given an array of (member_value, parameters) tuples as input_list,\n// return an ASCII string suitable for use in a HTTP field value.\n//\n// 1.  Let output be an empty string.\n//\n// 2.  For each (member_value, parameters) of input_list:\n//\n//     1.  If member_value is an array, append the result of running\n//         Serializing an Inner List (Section 4.1.1.1) with\n//         (member_value, parameters) to output.\n//\n//     2.  Otherwise, append the result of running Serializing an Item\n//         (Section 4.1.3) with (member_value, parameters) to output.\n//\n//     3.  If more member_values remain in input_list:\n//\n//         1.  Append \",\" to output.\n//\n//         2.  Append a single SP to output.\n//\n// 3.  Return output.\nexport function serializeList(list: SfMember[], options: SfEncodeOptions = { whitespace: true }): string {\n\tif (Array.isArray(list) === false) {\n\t\tthrow serializeError(list, LIST);\n\t}\n\n\tconst optionalWhiteSpace = options?.whitespace ? ' ' : '';\n\n\treturn list\n\t\t.map(item => {\n\t\t\tif (item instanceof SfItem === false) {\n\t\t\t\titem = new SfItem(item);\n\t\t\t}\n\n\t\t\t// TODO: Fix this type assertion\n\t\t\tconst i = item as any;\n\t\t\tif (Array.isArray(i.value)) {\n\t\t\t\treturn serializeInnerList(i);\n\t\t\t}\n\n\t\t\treturn serializeItem(i);\n\t\t})\n\t\t.join(`,${optionalWhiteSpace}`);\n}\n"]}