{"version":3,"file":"serializeBoolean.js","sourceRoot":"","sources":["../../../src/structuredfield/serialize/serializeBoolean.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,qBAAqB,CAAC;AAC9C,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AAErD,gCAAgC;AAChC,EAAE;AACF,wEAAwE;AACxE,6BAA6B;AAC7B,EAAE;AACF,6DAA6D;AAC7D,EAAE;AACF,qCAAqC;AACrC,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,sDAAsD;AACtD,EAAE;AACF,uDAAuD;AACvD,EAAE;AACF,qBAAqB;AACrB,MAAM,UAAU,gBAAgB,CAAC,KAAc;IAC9C,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE,CAAC;QAChC,MAAM,cAAc,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;IACD,OAAO,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;AAC5B,CAAC","sourcesContent":["import { BOOLEAN } from '../utils/BOOLEAN.js';\nimport { serializeError } from './serializeError.js';\n\n// 4.1.9.  Serializing a Boolean\n//\n// Given a Boolean as input_boolean, return an ASCII string suitable for\n// use in a HTTP field value.\n//\n// 1.  If input_boolean is not a boolean, fail serialization.\n//\n// 2.  Let output be an empty string.\n//\n// 3.  Append \"?\" to output.\n//\n// 4.  If input_boolean is true, append \"1\" to output.\n//\n// 5.  If input_boolean is false, append \"0\" to output.\n//\n// 6.  Return output.\nexport function serializeBoolean(value: boolean): string {\n\tif (typeof value !== 'boolean') {\n\t\tthrow serializeError(value, BOOLEAN);\n\t}\n\treturn value ? '?1' : '?0';\n}\n"]}