{"version":3,"file":"serializeDict.js","sourceRoot":"","sources":["../../../src/structuredfield/serialize/serializeDict.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AACtC,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AACxC,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAC;AAC7D,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AACnD,OAAO,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AACjD,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAEvD,mCAAmC;AACnC,EAAE;AACF,wEAAwE;AACxE,uEAAuE;AACvE,0DAA0D;AAC1D,EAAE;AACF,qCAAqC;AACrC,EAAE;AACF,sEAAsE;AACtE,2BAA2B;AAC3B,EAAE;AACF,yDAAyD;AACzD,iEAAiE;AACjE,EAAE;AACF,2CAA2C;AAC3C,EAAE;AACF,kEAAkE;AAClE,2DAA2D;AAC3D,EAAE;AACF,qBAAqB;AACrB,EAAE;AACF,oCAAoC;AACpC,EAAE;AACF,wEAAwE;AACxE,+DAA+D;AAC/D,oDAAoD;AACpD,EAAE;AACF,qEAAqE;AACrE,sEAAsE;AACtE,sBAAsB;AACtB,EAAE;AACF,sDAAsD;AACtD,EAAE;AACF,oCAAoC;AACpC,EAAE;AACF,4CAA4C;AAC5C,EAAE;AACF,qBAAqB;AACrB,MAAM,UAAU,aAAa,CAAC,IAA4C,EAAE,UAA2B,EAAE,UAAU,EAAE,IAAI,EAAE;IAC1H,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;QAC9B,MAAM,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,MAAM,OAAO,GAAG,IAAI,YAAY,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC5E,MAAM,kBAAkB,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,EAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IAE1D,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC;SACxB,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;QACpB,IAAI,IAAI,YAAY,MAAM,KAAK,KAAK,EAAE,CAAC;YACtC,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC;QACD,IAAI,MAAM,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE,CAAC;YACzB,MAAM,IAAI,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,CAAC;aACI,CAAC;YACL,MAAM,IAAI,GAAG,CAAC;YACd,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC/B,MAAM,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC;YACpC,CAAC;iBACI,CAAC;gBACL,MAAM,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC;YAC/B,CAAC;QACF,CAAC;QACD,OAAO,MAAM,CAAC;IACf,CAAC,CAAC;SACD,IAAI,CAAC,IAAI,kBAAkB,EAAE,CAAC,CAAC;AAClC,CAAC","sourcesContent":["import type { SfEncodeOptions } from '../SfEncodeOptions.js';\nimport { SfItem } from '../SfItem.js';\nimport { DICT } from '../utils/DICT.js';\nimport { serializeError } from './serializeError.js';\nimport { serializeInnerList } from './serializeInnerList.js';\nimport { serializeItem } from './serializeItem.js';\nimport { serializeKey } from './serializeKey.js';\nimport { serializeParams } from './serializeParams.js';\n\n// 4.1.2.  Serializing a Dictionary\n//\n// Given an ordered Dictionary as input_dictionary (each member having a\n// member_name and a tuple value of (member_value, parameters)), return\n// an ASCII string suitable for use in a HTTP field value.\n//\n// 1.  Let output be an empty string.\n//\n// 2.  For each member_name with a value of (member_value, parameters)\n//     in input_dictionary:\n//\n//     1.  Append the result of running Serializing a Key\n//         (Section 4.1.1.3) with member's member_name to output.\n//\n//     2.  If member_value is Boolean true:\n//\n//         1.  Append the result of running Serializing Parameters\n//             (Section 4.1.1.2) with parameters to output.\n//\n//     3.  Otherwise:\n//\n//         1.  Append \"=\" to output.\n//\n//         2.  If member_value is an array, append the result of running\n//             Serializing an Inner List (Section 4.1.1.1) with\n//             (member_value, parameters) to output.\n//\n//         3.  Otherwise, append the result of running Serializing an\n//             Item (Section 4.1.3) with (member_value, parameters) to\n//             output.\n//\n//     4.  If more members remain in input_dictionary:\n//\n//         1.  Append \",\" to output.\n//\n//         2.  Append a single SP to output.\n//\n// 3.  Return output.\nexport function serializeDict(dict: Record<string, any> | Map<string, any>, options: SfEncodeOptions = { whitespace: true }): string {\n\tif (typeof dict !== 'object') {\n\t\tthrow serializeError(dict, DICT);\n\t}\n\n\tconst entries = dict instanceof Map ? dict.entries() : Object.entries(dict);\n\tconst optionalWhiteSpace = options?.whitespace ? ' ' : '';\n\n\treturn Array.from(entries)\n\t\t.map(([key, item]) => {\n\t\t\tif (item instanceof SfItem === false) {\n\t\t\t\titem = new SfItem(item);\n\t\t\t}\n\t\t\tlet output = serializeKey(key);\n\t\t\tif (item.value === true) {\n\t\t\t\toutput += serializeParams(item.params);\n\t\t\t}\n\t\t\telse {\n\t\t\t\toutput += '=';\n\t\t\t\tif (Array.isArray(item.value)) {\n\t\t\t\t\toutput += serializeInnerList(item);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toutput += serializeItem(item);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t})\n\t\t.join(`,${optionalWhiteSpace}`);\n}\n"]}