{"version":3,"file":"serializeToken.js","sourceRoot":"","sources":["../../../src/structuredfield/serialize/serializeToken.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,gCAAgC,CAAC;AAE7D,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAC1C,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AAqBrD,MAAM,UAAU,cAAc,CAAC,KAAuB;IACrD,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;IACjC,IAAI,wCAAwC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE,CAAC;QACpE,MAAM,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACpC,CAAC;IACD,OAAO,KAAK,CAAC;AACd,CAAC","sourcesContent":["import { symbolToStr } from '../../cta/utils/symbolToStr.js';\nimport type { SfToken } from '../SfToken.js';\nimport { TOKEN } from '../utils/TOKEN.js';\nimport { serializeError } from './serializeError.js';\n\n// 4.1.7.  Serializing a Token\n//\n// Given a Token as input_token, return an ASCII string suitable for use\n// in a HTTP field value.\n//\n// 1.  Convert input_token into a sequence of ASCII characters; if\n//     conversion fails, fail serialization.\n//\n// 2.  If the first character of input_token is not ALPHA or \"*\", or the\n//     remaining portion contains a character not in tchar, \":\" or \"/\",\n//     fail serialization.\n//\n// 3.  Let output be an empty string.\n//\n// 4.  Append input_token to output.\n//\n// 5.  Return output.\nexport function serializeToken(token: symbol): string;\nexport function serializeToken(token: SfToken): string;\nexport function serializeToken(token: symbol | SfToken) {\n\tconst value = symbolToStr(token);\n\tif (/^([a-zA-Z*])([!#$%&'*+\\-.^_`|~\\w:/]*)$/.test(value) === false) {\n\t\tthrow serializeError(value, TOKEN);\n\t}\n\treturn value;\n}\n"]}