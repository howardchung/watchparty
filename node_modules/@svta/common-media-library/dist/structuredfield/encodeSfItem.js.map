{"version":3,"file":"encodeSfItem.js","sourceRoot":"","sources":["../../src/structuredfield/encodeSfItem.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAErC,OAAO,EAAE,aAAa,EAAE,MAAM,8BAA8B,CAAC;AA2B7D,MAAM,UAAU,YAAY,CAAC,KAA0B,EAAE,MAAqB;IAC7E,IAAI,CAAC,CAAC,KAAK,YAAY,MAAM,CAAC,EAAE,CAAC;QAChC,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACnC,CAAC;IAED,OAAO,aAAa,CAAC,KAAK,CAAC,CAAC;AAC7B,CAAC","sourcesContent":["import type { SfBareItem } from './SfBareItem.js';\nimport { SfItem } from './SfItem.js';\nimport type { SfParameters } from './SfParameters.js';\nimport { serializeItem } from './serialize/serializeItem.js';\n\n/**\n * Encode a structured field item to a string\n *\n * @param value - The structured field item to encode\n *\n * @returns The structured field string\n *\n * @group Structured Field\n *\n * @beta\n */\nexport function encodeSfItem(value: SfItem): string;\n\n/**\n * Encode a structured field value to a string with optional parameters.\n *\n * @param value - The structured field value to encode\n * @param params - The structured field parameters\n *\n * @returns The structured field string\n *\n * @beta\n */\nexport function encodeSfItem(value: SfBareItem, params?: SfParameters): string;\n\nexport function encodeSfItem(value: SfItem | SfBareItem, params?: SfParameters) {\n\tif (!(value instanceof SfItem)) {\n\t\tvalue = new SfItem(value, params);\n\t}\n\n\treturn serializeItem(value);\n}\n"]}