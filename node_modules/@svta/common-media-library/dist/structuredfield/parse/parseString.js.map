{"version":3,"file":"parseString.js","sourceRoot":"","sources":["../../../src/structuredfield/parse/parseString.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AAC5C,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAExD,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,2BAA2B;AAC3B,EAAE;AACF,oEAAoE;AACpE,uDAAuD;AACvD,EAAE;AACF,4CAA4C;AAC5C,EAAE;AACF,iEAAiE;AACjE,eAAe;AACf,EAAE;AACF,mDAAmD;AACnD,EAAE;AACF,uCAAuC;AACvC,EAAE;AACF,qEAAqE;AACrE,wBAAwB;AACxB,EAAE;AACF,wCAAwC;AACxC,EAAE;AACF,0DAA0D;AAC1D,EAAE;AACF,iEAAiE;AACjE,yCAAyC;AACzC,EAAE;AACF,+DAA+D;AAC/D,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,yDAAyD;AACzD,EAAE;AACF,sEAAsE;AACtE,yCAAyC;AACzC,EAAE;AACF,8CAA8C;AAC9C,EAAE;AACF,wEAAwE;AACxE,oBAAoB;AACpB,MAAM,UAAU,WAAW,CAAC,GAAW;IACtC,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAI,CAAC,GAAG,CAAC,CAAC;IAEV,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;QACpB,MAAM,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IAC/B,CAAC;IAED,CAAC,EAAE,CAAC;IAEJ,OAAO,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACvB,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;YACrB,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;gBACzB,MAAM,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YAC/B,CAAC;YAED,CAAC,EAAE,CAAC;YAEJ,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;gBACvC,MAAM,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YAC/B,CAAC;YAED,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;aACI,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YACzB,OAAO,WAAW,CAAC,MAAM,EAAE,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC;aACI,IAAI,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACpC,MAAM,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAC/B,CAAC;aACI,CAAC;YACL,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;QAED,CAAC,EAAE,CAAC;IACL,CAAC;IAED,MAAM,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AAC/B,CAAC","sourcesContent":["import { STRING } from '../utils/STRING.js';\nimport { STRING_REGEX } from '../utils/STRING_REGEX.js';\nimport type { ParsedValue } from './ParsedValue.js';\nimport { parsedValue } from './ParsedValue.js';\nimport { parseError } from './parseError.js';\n\n// 4.2.5.  Parsing a String\n//\n// Given an ASCII string as input_string, return an unquoted String.\n// input_string is modified to remove the parsed value.\n//\n// 1.  Let output_string be an empty string.\n//\n// 2.  If the first character of input_string is not DQUOTE, fail\n//     parsing.\n//\n// 3.  Discard the first character of input_string.\n//\n// 4.  While input_string is not empty:\n//\n//     1.  Let char be the result of consuming the first character of\n//         input_string.\n//\n//     2.  If char is a backslash (\"\\\"):\n//\n//         1.  If input_string is now empty, fail parsing.\n//\n//         2.  Let next_char be the result of consuming the first\n//             character of input_string.\n//\n//         3.  If next_char is not DQUOTE or \"\\\", fail parsing.\n//\n//         4.  Append next_char to output_string.\n//\n//     3.  Else, if char is DQUOTE, return output_string.\n//\n//     4.  Else, if char is in the range %x00-1f or %x7f (i.e., is not\n//         in VCHAR or SP), fail parsing.\n//\n//     5.  Else, append char to output_string.\n//\n// 5.  Reached the end of input_string without finding a closing DQUOTE;\n//     fail parsing.\nexport function parseString(src: string): ParsedValue<string> {\n\tlet output = '';\n\tlet i = 0;\n\n\tif (src[i] !== `\"`) {\n\t\tthrow parseError(src, STRING);\n\t}\n\n\ti++;\n\n\twhile (src.length > i) {\n\t\tif (src[i] === `\\\\`) {\n\t\t\tif (src.length <= i + 1) {\n\t\t\t\tthrow parseError(src, STRING);\n\t\t\t}\n\n\t\t\ti++;\n\n\t\t\tif (src[i] !== `\"` && src[i] !== `\\\\`) {\n\t\t\t\tthrow parseError(src, STRING);\n\t\t\t}\n\n\t\t\toutput += src[i];\n\t\t}\n\t\telse if (src[i] === `\"`) {\n\t\t\treturn parsedValue(output, src.substring(++i));\n\t\t}\n\t\telse if (STRING_REGEX.test(src[i])) {\n\t\t\tthrow parseError(src, STRING);\n\t\t}\n\t\telse {\n\t\t\toutput += src[i];\n\t\t}\n\n\t\ti++;\n\t}\n\n\tthrow parseError(src, STRING);\n}\n"]}