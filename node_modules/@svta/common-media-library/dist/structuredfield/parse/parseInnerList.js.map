{"version":3,"file":"parseInnerList.js","sourceRoot":"","sources":["../../../src/structuredfield/parse/parseInnerList.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AACtC,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAE1C,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAEvD,kCAAkC;AAClC,EAAE;AACF,uEAAuE;AACvE,uEAAuE;AACvE,+DAA+D;AAC/D,EAAE;AACF,qEAAqE;AACrE,oBAAoB;AACpB,EAAE;AACF,wCAAwC;AACxC,EAAE;AACF,uCAAuC;AACvC,EAAE;AACF,+DAA+D;AAC/D,EAAE;AACF,yDAAyD;AACzD,EAAE;AACF,2DAA2D;AAC3D,EAAE;AACF,8DAA8D;AAC9D,8DAA8D;AAC9D,EAAE;AACF,yDAAyD;AACzD,EAAE;AACF,4DAA4D;AAC5D,6CAA6C;AAC7C,EAAE;AACF,qCAAqC;AACrC,EAAE;AACF,wEAAwE;AACxE,mBAAmB;AACnB,EAAE;AACF,6DAA6D;AAC7D,MAAM,UAAU,cAAc,CAAC,GAAW,EAAE,OAAyB;IACpE,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;QACpB,MAAM,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC9B,CAAC;IAED,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IACvB,MAAM,SAAS,GAAa,EAAE,CAAC;IAC/B,OAAO,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACvB,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACjB,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YACpB,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,gBAAgB,GAAG,eAAe,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAEvD,OAAO,WAAW,CACjB,IAAI,MAAM,CAAC,SAAS,EAAE,gBAAgB,CAAC,KAAK,CAAQ,EACpD,gBAAgB,CAAC,GAAG,CACpB,CAAC;QACH,CAAC;QAED,MAAM,UAAU,GAAG,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QAC3C,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACjC,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC;QAErB,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YACtC,MAAM,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC9B,CAAC;IACF,CAAC;IAED,MAAM,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AAC9B,CAAC","sourcesContent":["import type { SfDecodeOptions } from '../SfDecodeOptions.js';\nimport type { SfInnerList } from '../SfInnerList.js';\nimport { SfItem } from '../SfItem.js';\nimport { INNER } from '../utils/INNER.js';\nimport type { ParsedValue } from './ParsedValue.js';\nimport { parsedValue } from './ParsedValue.js';\nimport { parseError } from './parseError.js';\nimport { parseItem } from './parseItem.js';\nimport { parseParameters } from './parseParameters.js';\n\n// 4.2.1.2.  Parsing an Inner List\n//\n// Given an ASCII string as input_string, return the tuple (inner_list,\n// parameters), where inner_list is an array of (bare_item, parameters)\n// tuples. input_string is modified to remove the parsed value.\n//\n// 1.  Consume the first character of input_string; if it is not \"(\",\n//     fail parsing.\n//\n// 2.  Let inner_list be an empty array.\n//\n// 3.  While input_string is not empty:\n//\n//     1.  Discard any leading SP characters from input_string.\n//\n//     2.  If the first character of input_string is \")\":\n//\n//         1.  Consume the first character of input_string.\n//\n//         2.  Let parameters be the result of running Parsing\n//             Parameters (Section 4.2.3.2) with input_string.\n//\n//         3.  Return the tuple (inner_list, parameters).\n//\n//     3.  Let item be the result of running Parsing an Item\n//         (Section 4.2.3) with input_string.\n//\n//     4.  Append item to inner_list.\n//\n//     5.  If the first character of input_string is not SP or \")\", fail\n//         parsing.\n//\n// 4.  The end of the inner list was not found; fail parsing.\nexport function parseInnerList(src: string, options?: SfDecodeOptions): ParsedValue<SfInnerList> {\n\tif (src[0] !== '(') {\n\t\tthrow parseError(src, INNER);\n\t}\n\n\tsrc = src.substring(1);\n\tconst innerList: SfItem[] = [];\n\twhile (src.length > 0) {\n\t\tsrc = src.trim();\n\t\tif (src[0] === ')') {\n\t\t\tsrc = src.substring(1);\n\t\t\tconst parsedParameters = parseParameters(src, options);\n\n\t\t\treturn parsedValue(\n\t\t\t\tnew SfItem(innerList, parsedParameters.value) as any,\n\t\t\t\tparsedParameters.src,\n\t\t\t);\n\t\t}\n\n\t\tconst parsedItem = parseItem(src, options);\n\t\tinnerList.push(parsedItem.value);\n\t\tsrc = parsedItem.src;\n\n\t\tif (src[0] !== ' ' && src[0] !== ')') {\n\t\t\tthrow parseError(src, INNER);\n\t\t}\n\t}\n\n\tthrow parseError(src, INNER);\n}\n"]}