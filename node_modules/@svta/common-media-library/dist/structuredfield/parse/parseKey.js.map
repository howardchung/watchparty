{"version":3,"file":"parseKey.js","sourceRoot":"","sources":["../../../src/structuredfield/parse/parseKey.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAEtC,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,0BAA0B;AAC1B,EAAE;AACF,uEAAuE;AACvE,uCAAuC;AACvC,EAAE;AACF,oEAAoE;AACpE,oBAAoB;AACpB,EAAE;AACF,4CAA4C;AAC5C,EAAE;AACF,uCAAuC;AACvC,EAAE;AACF,wEAAwE;AACxE,8DAA8D;AAC9D,EAAE;AACF,qEAAqE;AACrE,wBAAwB;AACxB,EAAE;AACF,wCAAwC;AACxC,EAAE;AACF,4BAA4B;AAC5B,MAAM,UAAU,QAAQ,CAAC,GAAW;IACnC,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC;QACvC,MAAM,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5B,CAAC;IAED,IAAI,KAAK,GAAG,EAAE,CAAC;IAEf,OAAO,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACvB,IAAI,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC;YAC9C,OAAO,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,CAAC;QAED,KAAK,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC,EAAE,CAAC;IACL,CAAC;IAED,OAAO,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC","sourcesContent":["import { KEY } from '../utils/KEY.js';\nimport type { ParsedValue } from './ParsedValue.js';\nimport { parsedValue } from './ParsedValue.js';\nimport { parseError } from './parseError.js';\n\n// 4.2.3.3.  Parsing a Key\n//\n// Given an ASCII string as input_string, return a key. input_string is\n// modified to remove the parsed value.\n//\n// 1.  If the first character of input_string is not lcalpha or \"*\",\n//     fail parsing.\n//\n// 2.  Let output_string be an empty string.\n//\n// 3.  While input_string is not empty:\n//\n//     1.  If the first character of input_string is not one of lcalpha,\n//         DIGIT, \"_\", \"-\", \".\", or \"*\", return output_string.\n//\n//     2.  Let char be the result of consuming the first character of\n//         input_string.\n//\n//     3.  Append char to output_string.\n//\n// 4.  Return output_string.\nexport function parseKey(src: string): ParsedValue<string> {\n\tlet i = 0;\n\tif (/^[a-z*]$/.test(src[i]) === false) {\n\t\tthrow parseError(src, KEY);\n\t}\n\n\tlet value = '';\n\n\twhile (src.length > i) {\n\t\tif (/^[a-z0-9_\\-.*]$/.test(src[i]) === false) {\n\t\t\treturn parsedValue(value, src.substring(i));\n\t\t}\n\n\t\tvalue += src[i];\n\t\ti++;\n\t}\n\n\treturn parsedValue(value, src.substring(i));\n}\n"]}