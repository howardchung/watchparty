{"version":3,"file":"parseXml.js","sourceRoot":"","sources":["../../src/xml/parseXml.ts"],"names":[],"mappings":"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","sourcesContent":["import { unescapeHtml } from '../utils/unescapeHtml.js';\nimport type { XmlNode } from './XmlNode.js';\nimport type { XmlParseOptions } from './XmlParseOptions.js';\n\n/**\n * Parse XML into a JS object with no validation and some failure tolerance\n *\n * @param input - The input XML string\n * @param options - Optional parsing options\n * @returns The parsed XML\n *\n * @group XML\n *\n * @beta\n *\n * @example\n * {@includeCode ../../test/xml/parseXml.test.ts#example}\n */\nexport function parseXml(input: string, options: XmlParseOptions = {}): XmlNode {\n\tlet pos = options.pos || 0;\n\n\tconst length = input.length;\n\tconst keepComments = !!options.keepComments;\n\tconst keepWhitespace = !!options.keepWhitespace;\n\n\tconst openBracket = '<';\n\tconst openBracketCC = '<'.charCodeAt(0);\n\tconst closeBracket = '>';\n\tconst closeBracketCC = '>'.charCodeAt(0);\n\tconst minusCC = '-'.charCodeAt(0);\n\tconst slashCC = '/'.charCodeAt(0);\n\tconst questionCC = '?'.charCodeAt(0);\n\tconst exclamationCC = '!'.charCodeAt(0);\n\tconst singleQuoteCC = \"'\".charCodeAt(0);\n\tconst doubleQuoteCC = '\"'.charCodeAt(0);\n\tconst openCornerBracketCC = '['.charCodeAt(0);\n\tconst closeCornerBracketCC = ']'.charCodeAt(0);\n\tconst nameSpacer = '\\r\\n\\t>/= ';\n\n\tfunction createTextNode(value: string, nodeName = '#text'): XmlNode {\n\t\treturn {\n\t\t\tnodeName,\n\t\t\tnodeValue: value,\n\t\t\tattributes: {},\n\t\t\tchildNodes: [],\n\t\t};\n\t}\n\n\t/**\n\t * parsing a list of entries\n\t */\n\tfunction parseChildren(tagName: string = ''): XmlNode[] {\n\t\tconst children: any[] = [];\n\t\twhile (input[pos]) {\n\t\t\tif (input.charCodeAt(pos) == openBracketCC) {\n\t\t\t\tif (input.charCodeAt(pos + 1) === slashCC) {\n\t\t\t\t\tconst closeStart = pos + 2;\n\t\t\t\t\tpos = input.indexOf(closeBracket, pos);\n\t\t\t\t\tif (!input.startsWith(tagName, closeStart)) {\n\t\t\t\t\t\tconst parsedText = input.substring(0, pos).split('\\n');\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'Unexpected close tag\\nLine: ' + (parsedText.length - 1) +\n\t\t\t\t\t\t\t'\\nColumn: ' + (parsedText[parsedText.length - 1].length + 1) +\n\t\t\t\t\t\t\t'\\nChar: ' + input[pos],\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (pos + 1) {\n\t\t\t\t\t\tpos += 1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn children;\n\t\t\t\t}\n\t\t\t\telse if (input.charCodeAt(pos + 1) === questionCC) {\n\t\t\t\t\t// xml declaration\n\t\t\t\t\tpos = input.indexOf(closeBracket, pos);\n\t\t\t\t\tpos++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if (input.charCodeAt(pos + 1) === exclamationCC) {\n\t\t\t\t\tif (input.charCodeAt(pos + 2) == minusCC) {\n\t\t\t\t\t\t// comment support\n\t\t\t\t\t\tconst startCommentPos = pos;\n\t\t\t\t\t\twhile (pos !== -1 && !(input.charCodeAt(pos) === closeBracketCC && input.charCodeAt(pos - 1) == minusCC && input.charCodeAt(pos - 2) == minusCC && pos != -1)) {\n\t\t\t\t\t\t\tpos = input.indexOf(closeBracket, pos + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (pos === -1) {\n\t\t\t\t\t\t\tpos = length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (keepComments) {\n\t\t\t\t\t\t\tchildren.push(createTextNode(input.substring(startCommentPos, pos + 1), '#comment'));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (\n\t\t\t\t\t\tinput.charCodeAt(pos + 2) === openCornerBracketCC &&\n\t\t\t\t\t\tinput.charCodeAt(pos + 8) === openCornerBracketCC &&\n\t\t\t\t\t\tinput.startsWith('CDATA', pos + 3)\n\t\t\t\t\t) {\n\t\t\t\t\t\t// cdata\n\t\t\t\t\t\tconst cdataEndIndex = input.indexOf(']]>', pos);\n\t\t\t\t\t\tif (cdataEndIndex == -1) {\n\t\t\t\t\t\t\tchildren.push(createTextNode(input.substr(pos + 9), '#cdata'));\n\t\t\t\t\t\t\tpos = length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tchildren.push(createTextNode(input.substring(pos + 9, cdataEndIndex), '#cdata'));\n\t\t\t\t\t\t\tpos = cdataEndIndex + 3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// doctypesupport\n\t\t\t\t\t\tconst startDoctype = pos + 1;\n\t\t\t\t\t\tpos += 2;\n\t\t\t\t\t\tlet encapsuled = false;\n\t\t\t\t\t\twhile ((input.charCodeAt(pos) !== closeBracketCC || encapsuled === true) && input[pos]) {\n\t\t\t\t\t\t\tif (input.charCodeAt(pos) === openCornerBracketCC) {\n\t\t\t\t\t\t\t\tencapsuled = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (encapsuled === true && input.charCodeAt(pos) === closeCornerBracketCC) {\n\t\t\t\t\t\t\t\tencapsuled = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpos++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchildren.push(createTextNode(input.substring(startDoctype, pos), '#doctype'));\n\t\t\t\t\t}\n\n\t\t\t\t\tpos++;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst node = parseNode();\n\t\t\t\tchildren.push(node);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst text = parseText();\n\t\t\t\tif (keepWhitespace) {\n\t\t\t\t\tif (text.length > 0) {\n\t\t\t\t\t\tchildren.push(createTextNode(text));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst trimmed = text.trim();\n\t\t\t\t\tif (trimmed.length > 0) {\n\t\t\t\t\t\tchildren.push(createTextNode(trimmed));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpos++;\n\t\t\t}\n\t\t}\n\t\treturn children;\n\t}\n\n\t/**\n\t * returns the text outside of texts until the first '&lt;'\n\t */\n\tfunction parseText(): string {\n\t\tconst start = pos;\n\t\tpos = input.indexOf(openBracket, pos) - 1;\n\t\tif (pos === -2) {\n\t\t\tpos = length;\n\t\t}\n\n\t\treturn unescapeHtml(input.slice(start, pos + 1));\n\t}\n\n\t/**\n\t * returns text until the first nonAlphabetic letter\n\t */\n\tfunction parseName(): string {\n\t\tconst start = pos;\n\t\twhile (nameSpacer.indexOf(input[pos]) === -1 && input[pos]) {\n\t\t\tpos++;\n\t\t}\n\t\treturn input.slice(start, pos);\n\t}\n\n\t/**\n\t * parses the attributes of a node\n\t */\n\tfunction parseAttributes(): Record<string, string> {\n\t\tconst attributes: Record<string, string> = {};\n\n\t\t// parsing attributes\n\t\twhile (input.charCodeAt(pos) !== closeBracketCC && input[pos]) {\n\t\t\tconst c = input.charCodeAt(pos);\n\t\t\tif ((c > 64 && c < 91) || (c > 96 && c < 123)) {\n\t\t\t\tconst name = parseName();\n\t\t\t\tlet value: string = '';\n\t\t\t\t// search beginning of the string\n\t\t\t\tlet code = input.charCodeAt(pos);\n\t\t\t\twhile (code !== singleQuoteCC && code !== doubleQuoteCC) {\n\t\t\t\t\tpos++;\n\t\t\t\t\tcode = input.charCodeAt(pos);\n\t\t\t\t}\n\n\t\t\t\tif (code === singleQuoteCC || code === doubleQuoteCC) {\n\t\t\t\t\tvalue = parseString();\n\t\t\t\t\tif (pos === -1) {\n\t\t\t\t\t\tthrow new Error('Missing closing quote');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tpos--;\n\t\t\t\t}\n\n\t\t\t\tattributes[name] = unescapeHtml(value);\n\t\t\t}\n\t\t\tpos++;\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\t/**\n\t * parses a node\n\t */\n\tfunction parseNode(): XmlNode {\n\t\tpos++;\n\t\tconst nodeName = parseName();\n\t\tlet localName = nodeName;\n\t\tlet prefix = null;\n\n\t\tconst nsIndex = nodeName.indexOf(':');\n\t\tif (nsIndex !== -1) {\n\t\t\tprefix = nodeName.slice(0, nsIndex);\n\t\t\tlocalName = nodeName.slice(nsIndex + 1);\n\t\t}\n\n\t\tconst attributes = parseAttributes();\n\n\t\tlet childNodes: any[] = [];\n\n\t\t// optional parsing of children\n\t\tconst prev = input.charCodeAt(pos - 1);\n\t\tpos++;\n\n\t\tif (prev !== slashCC) {\n\t\t\tchildNodes = parseChildren(nodeName);\n\t\t}\n\n\t\treturn {\n\t\t\tnodeName,\n\t\t\tnodeValue: null,\n\t\t\tattributes,\n\t\t\tchildNodes,\n\t\t\tprefix,\n\t\t\tlocalName,\n\t\t};\n\t}\n\n\t/**\n\t * is parsing a string, that starts with a char and with the same usually ' or \"\n\t */\n\tfunction parseString(): string {\n\t\tconst startChar = input[pos];\n\t\tconst startpos = pos + 1;\n\t\tpos = input.indexOf(startChar, startpos);\n\t\treturn input.slice(startpos, pos);\n\t}\n\n\treturn {\n\t\tnodeName: '#document',\n\t\tnodeValue: null,\n\t\tchildNodes: parseChildren(''),\n\t\tattributes: {},\n\t};\n}\n"]}