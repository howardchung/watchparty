{"version":3,"file":"CmsdDynamicParams.js","sourceRoot":"","sources":["../../src/cmsd/CmsdDynamicParams.ts"],"names":[],"mappings":"","sourcesContent":["import type { CmsdCustomKey } from './CmsdCustomKey.js';\nimport type { CmsdValue } from './CmsdValue.js';\n\n/**\n * Common Media Server Data (CMSD) dynamic response header field parameters.\n *\n * @see {@link https://cdn.cta.tech/cta/media/media/resources/standards/pdfs/cta-5006-final.pdf|CMSD Spec}\n *\n * @group CMSD\n *\n * @beta\n */\nexport type CmsdDynamicParams = {\n\t/**\n\t * Custom key names may be used, but they MUST carry a hyphenated prefix to ensure that there will not be a namespace collision\n\t * with future revisions to this specification. Clients SHOULD use a reverse-DNS syntax when defining their own prefix.\n\t */\n\t[index: CmsdCustomKey]: CmsdValue;\n\n\t/**\n\t * Duress\n\t *\n\t * Key is included without a value if the server is under duress, due to cpu, memory, disk IO, network IO or other reasons. The\n\t * thresholds for signaling duress are left to the discretion of the server operator. The intent is that the client will use this\n\t * signal to move away to an alternate server if possible. This key MUST NOT be sent if it is false.\n\t *\n\t * Boolean\n\t */\n\tdu?: boolean;\n\n\t/**\n\t * Estimated Throughput\n\t *\n\t * The throughput between the server and the client over the currently negotiated transport as estimated by the server at the start\n\t * of the response. The value is expressed in units of kilobits per second and rounded to the nearest integer. The time window for\n\t * this estimate is expected to be the duration of the current response at most. The throughput may vary during the response and the\n\t * client SHOULD use this data as an adjunct to its own throughput estimates. As an informative example, this estimate could be\n\t * derived in this way:\n\t *\n\t *   etp = 8 * send_window / (rtt)\n\t *\n\t * where send_window = min (cwnd * mss, rwnd) with Congestion Window (cwnd) measured in packets, Maximum Segment Size (mss) in bytes,\n\t * Receiver Window (rwnd) in bytes and rtt in milliseconds. Note that multiple client processes adjacent to the media player may pool\n\t * their requests into the same connection to the server. In this case the server estimate of throughput will be against the entirety\n\t * of the connection, not all of which will be accessible to the media player.\n\t *\n\t * Integer Kbps\n\t */\n\tetp?: number;\n\n\t/**\n\t * Max suggested bitrate\n\t *\n\t * The maximum bitrate value that the player SHOULD play in its Adaptive Bit Rate (ABR) ladder. If the player is playing a bitrate higher\n\t * than this value, it SHOULD immediately switch to a bitrate lower than or equal to this value.\n\t *\n\t * Integer Kbps\n\t */\n\tmb?: number;\n\n\t/**\n\t * Response delay\n\t *\n\t * The time elapsed between the receipt of the request and when the first byte of the body becomes available to send to the client. The\n\t * intention is for receivers to use this value to more accurately calculate the throughput of the connection [MHV22].\n\t *\n\t * Integer milliseconds\n\t */\n\trd?: number;\n\n\t/**\n\t * Round Trip Time\n\t *\n\t * Estimated round trip time between client and server. This estimate may be derived from the transport handshake. For subsequent requests\n\t * over the same connection, the value can be refined to be an exponentially weighted moving average of prior instantaneous values. An\n\t * informative example algorithm for this averaging is provided by [18].\n\t *\n\t * Integer Kbps\n\t */\n\trtt?: number;\n};\n"]}