{"version":3,"file":"mapDashToHam.js","sourceRoot":"","sources":["../../../../../../src/cmaf/ham/mapper/dash/mapDashToHam/mapDashToHam.ts"],"names":[],"mappings":"AAWA,OAAO,EAAE,uBAAuB,EAAE,MAAM,gDAAgD,CAAC;AAEzF,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC/C,OAAO,EAAE,oBAAoB,EAAE,MAAM,iCAAiC,CAAC;AACvE,OAAO,EAAE,iBAAiB,EAAE,MAAM,8BAA8B,CAAC;AAEjE,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C;;;;;;;GAOG;AACH,MAAM,UAAU,YAAY,CAAC,IAAkB;IAC9C,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAc,EAAE,EAAE;QAC7C,MAAM,QAAQ,GAAW,uBAAuB,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QACpE,MAAM,cAAc,GAAW,iBAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAEnE,MAAM,kBAAkB,GAAsC,EAAE,CAAC;QAEjE,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,aAA4B,EAAE,EAAE;;YACzD,MAAM,MAAM,GAAY,aAAa,CAAC,cAAc,CAAC,GAAG,CACvD,CAAC,cAA8B,EAAE,EAAE;gBAClC,MAAM,QAAQ,GAAc,WAAW,CACtC,aAAa,EACb,cAAc,EACd,QAAQ,CACR,CAAC;gBAEF,OAAO,SAAS,CACf,aAAa,EACb,cAAc,EACd,QAAQ,EACR,oBAAoB,CAAC,aAAa,EAAE,cAAc,CAAC,CACnD,CAAC;YACH,CAAC,CACD,CAAC;YAEF,MAAM,KAAK,GAAW,QAAQ,CAAC,aAAa,CAAC,CAAC;YAC9C,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC;gBAChC,kBAAkB,CAAC,KAAK,CAAC,GAAG;oBAC3B,EAAE,EAAE,KAAK;oBACT,aAAa,EAAE,EAAE;iBACD,CAAC;YACnB,CAAC;YAED,kBAAkB,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC;gBAC5C,EAAE,EACD,MAAA,MAAA,aAAa,CAAC,CAAC,CAAC,EAAE,mCAClB,MAAA,MAAA,aAAa,CAAC,gBAAgB,0CAAE,EAAE,CAAC,CAAC,CAAC,0CAAE,CAAC,CAAC,EAAE,mCAC3C,KAAK;gBACN,MAAM;aACU,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,MAAM,aAAa,GAAmB,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;QAExE,OAAO,EAAE,EAAE,EAAE,cAAc,EAAE,aAAa,EAAkB,CAAC;IAC9D,CAAC,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import type { AdaptationSet } from '../../../types/mapper/dash/AdaptationSet.js';\nimport type { DashManifest } from '../../../types/mapper/dash/DashManifest.js';\nimport type { Period } from '../../../types/mapper/dash/Period.js';\nimport type { Representation } from '../../../types/mapper/dash/Representation.js';\n\nimport type { Presentation } from '../../../types/model/Presentation.js';\nimport type { Segment } from '../../../types/model/Segment.js';\nimport type { SelectionSet } from '../../../types/model/SelectionSet.js';\nimport type { SwitchingSet } from '../../../types/model/SwitchingSet.js';\nimport type { Track } from '../../../types/model/Track.js';\n\nimport { iso8601DurationToNumber } from '../../../utils/dash/iso8601DurationToNumber.js';\n\nimport { getGroup } from './utils/getGroup.js';\nimport { getInitializationUrl } from './utils/getInitializationUrl.js';\nimport { getPresentationId } from './utils/getPresentationId.js';\n\nimport { mapSegments } from './mapSegments.js';\nimport { mapTracks } from './mapTracks.js';\n\n/**\n * @internal\n *\n * Main function to map dash to ham.\n *\n * @param dash - Dash manifest to map\n * @returns List of presentations in ham\n */\nexport function mapDashToHam(dash: DashManifest): Presentation[] {\n\treturn dash.MPD.Period.map((period: Period) => {\n\t\tconst duration: number = iso8601DurationToNumber(period.$.duration);\n\t\tconst presentationId: string = getPresentationId(period, duration);\n\n\t\tconst selectionSetGroups: { [group: string]: SelectionSet } = {};\n\n\t\tperiod.AdaptationSet.map((adaptationSet: AdaptationSet) => {\n\t\t\tconst tracks: Track[] = adaptationSet.Representation.map(\n\t\t\t\t(representation: Representation) => {\n\t\t\t\t\tconst segments: Segment[] = mapSegments(\n\t\t\t\t\t\tadaptationSet,\n\t\t\t\t\t\trepresentation,\n\t\t\t\t\t\tduration,\n\t\t\t\t\t);\n\n\t\t\t\t\treturn mapTracks(\n\t\t\t\t\t\tadaptationSet,\n\t\t\t\t\t\trepresentation,\n\t\t\t\t\t\tsegments,\n\t\t\t\t\t\tgetInitializationUrl(adaptationSet, representation),\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconst group: string = getGroup(adaptationSet);\n\t\t\tif (!selectionSetGroups[group]) {\n\t\t\t\tselectionSetGroups[group] = {\n\t\t\t\t\tid: group,\n\t\t\t\t\tswitchingSets: [],\n\t\t\t\t} as SelectionSet;\n\t\t\t}\n\n\t\t\tselectionSetGroups[group].switchingSets.push({\n\t\t\t\tid:\n\t\t\t\t\tadaptationSet.$.id ??\n\t\t\t\t\tadaptationSet.ContentComponent?.at(0)?.$.id ??\n\t\t\t\t\tgroup,\n\t\t\t\ttracks,\n\t\t\t} as SwitchingSet);\n\t\t});\n\n\t\tconst selectionSets: SelectionSet[] = Object.values(selectionSetGroups);\n\n\t\treturn { id: presentationId, selectionSets } as Presentation;\n\t});\n}\n"]}