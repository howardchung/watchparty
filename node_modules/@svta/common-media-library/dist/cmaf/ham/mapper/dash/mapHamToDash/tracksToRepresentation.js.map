{"version":3,"file":"tracksToRepresentation.js","sourceRoot":"","sources":["../../../../../../src/cmaf/ham/mapper/dash/mapHamToDash/tracksToRepresentation.ts"],"names":[],"mappings":"AAQA,OAAO,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAC;AAC7D,OAAO,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAC;AAE7D,OAAO,EAAE,YAAY,EAAE,MAAM,yBAAyB,CAAC;AAEvD,MAAM,UAAU,sBAAsB,CAAC,MAAe;IACrD,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;;QAC3B,MAAM,cAAc,GAAmB;YACtC,CAAC,EAAE;gBACF,EAAE,EAAE,KAAK,CAAC,EAAE;gBACZ,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC,QAAQ,EAAE;aACrC;YACD,WAAW,EAAE,kBAAkB,CAAC,KAAK,CAAC;YACtC,WAAW,EAAE,kBAAkB,CAAC,KAAK,CAAC;SACpB,CAAC;QACpB,cAAc,CAAC,CAAC,CAAC,QAAQ,GAAG,GAAG,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,gBAAgB;QACjE,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YAC5B,MAAM,UAAU,GAAG,KAAmB,CAAC;YACvC,cAAc,CAAC,CAAC,GAAG;gBAClB,GAAG,cAAc,CAAC,CAAC;gBACnB,SAAS,EAAE,YAAY,CAAC,KAAK,CAAC;gBAC9B,KAAK,EAAE,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE;gBAClC,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACpC,MAAM,EAAE,UAAU,CAAC,KAAK;aACxB,CAAC;YACF,IAAI,UAAU,CAAC,QAAQ,EAAE,CAAC;gBACzB,cAAc,CAAC,CAAC,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;YACjD,CAAC;QACF,CAAC;QACD,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YAC5B,MAAM,UAAU,GAAG,KAAmB,CAAC;YACvC,cAAc,CAAC,CAAC,GAAG;gBAClB,GAAG,cAAc,CAAC,CAAC;gBACnB,iBAAiB,EAAE,UAAU,CAAC,UAAU,CAAC,QAAQ,EAAE;gBACnD,MAAM,EAAE,UAAU,CAAC,KAAK;aACxB,CAAC;YACF,cAAc,CAAC,yBAAyB,GAAG;gBAC1C;oBACC,CAAC,EAAE;wBACF,WAAW,EACV,wDAAwD,EAAE,kBAAkB;wBAC7E,KAAK,EAAE,MAAA,UAAU,CAAC,QAAQ,CAAC,QAAQ,EAAE,mCAAI,EAAE;qBAC3C;iBAC4B;aAC9B,CAAC;QACH,CAAC;QACD,IAAI,MAAA,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,0CAAE,SAAS,EAAE,CAAC;YAClC,kFAAkF;YAClF,cAAc,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAClD,CAAC;QACD,OAAO,cAAc,CAAC;IACvB,CAAC,CAAC,CAAC;AACJ,CAAC","sourcesContent":["\nimport type { AudioChannelConfiguration } from '../../../types/mapper/dash/AudioChannelConfiguration.js';\nimport type { Representation } from '../../../types/mapper/dash/Representation.js';\n\nimport type { AudioTrack } from '../../../types/model/AudioTrack.js';\nimport type { Track } from '../../../types/model/Track.js';\nimport type { VideoTrack } from '../../../types/model/VideoTrack.js';\n\nimport { trackToSegmentBase } from './trackToSegmentBase.js';\nimport { trackToSegmentList } from './trackToSegmentList.js';\n\nimport { getFrameRate } from './utils/getFrameRate.js';\n\nexport function tracksToRepresentation(tracks: Track[]): Representation[] {\n\treturn tracks.map((track) => {\n\t\tconst representation: Representation = {\n\t\t\t$: {\n\t\t\t\tid: track.id,\n\t\t\t\tbandwidth: track.bandwidth.toString(),\n\t\t\t},\n\t\t\tSegmentBase: trackToSegmentBase(track),\n\t\t\tSegmentList: trackToSegmentList(track),\n\t\t} as Representation;\n\t\trepresentation.$.mimeType = `${track.type}/mp4`; //Harcoded value\n\t\tif (track.type === 'video') {\n\t\t\tconst videoTrack = track as VideoTrack;\n\t\t\trepresentation.$ = {\n\t\t\t\t...representation.$,\n\t\t\t\tframeRate: getFrameRate(track),\n\t\t\t\twidth: videoTrack.width.toString(),\n\t\t\t\theight: videoTrack.height.toString(),\n\t\t\t\tcodecs: videoTrack.codec,\n\t\t\t};\n\t\t\tif (videoTrack.scanType) {\n\t\t\t\trepresentation.$.scanType = videoTrack.scanType;\n\t\t\t}\n\t\t}\n\t\tif (track.type === 'audio') {\n\t\t\tconst audioTrack = track as AudioTrack;\n\t\t\trepresentation.$ = {\n\t\t\t\t...representation.$,\n\t\t\t\taudioSamplingRate: audioTrack.sampleRate.toString(),\n\t\t\t\tcodecs: audioTrack.codec,\n\t\t\t};\n\t\t\trepresentation.AudioChannelConfiguration = [\n\t\t\t\t{\n\t\t\t\t\t$: {\n\t\t\t\t\t\tschemeIdUri:\n\t\t\t\t\t\t\t'urn:mpeg:dash:23003:3:audio_channel_configuration:2011', // hardcoded value\n\t\t\t\t\t\tvalue: audioTrack.channels.toString() ?? '',\n\t\t\t\t\t},\n\t\t\t\t} as AudioChannelConfiguration,\n\t\t\t];\n\t\t}\n\t\tif (track.segments[0]?.byteRange) {\n\t\t\t// Only BaseSegments have byteRange on segments, and BaseURL on the representation\n\t\t\trepresentation.BaseURL = [track.segments[0].url];\n\t\t}\n\t\treturn representation;\n\t});\n}\n"]}