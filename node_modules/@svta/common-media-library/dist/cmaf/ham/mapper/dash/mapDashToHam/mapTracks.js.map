{"version":3,"file":"mapTracks.js","sourceRoot":"","sources":["../../../../../../src/cmaf/ham/mapper/dash/mapDashToHam/mapTracks.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AdaptationSet } from '../../../types/mapper/dash/AdaptationSet.js';\nimport type { Representation } from '../../../types/mapper/dash/Representation.js';\n\nimport type { AudioTrack } from '../../../types/model/AudioTrack.js';\nimport type { Segment } from '../../../types/model/Segment.js';\nimport type { TextTrack } from '../../../types/model/TextTrack.js';\nimport type { VideoTrack } from '../../../types/model/VideoTrack.js';\n\n\nimport { getChannels } from './utils/getChannels.js';\nimport { getCodec } from './utils/getCodec.js';\nimport { getContentType } from './utils/getContentType.js';\nimport { getFrameRate } from './utils/getFrameRate.js';\nimport { getLanguage } from './utils/getLanguage.js';\nimport { getSampleRate } from './utils/getSampleRate.js';\nimport { getSar } from './utils/getSar.js';\nimport { getTrackDuration } from './utils/getTrackDuration.js';\n\n/**\n * @internal\n *\n * Map dash components to ham tracks.\n *\n * @param adaptationSet - AdaptationSet of the dash manifest\n * @param representation - Representation of the dash manifest\n * @param segments - Segments from the representation of the dash manifest\n * @param initializationUrl - Initialization url from the track\n * @returns AudioTrack, VideoTrack or TextTrack depending on the type\n */\nexport function mapTracks(\n\tadaptationSet: AdaptationSet,\n\trepresentation: Representation,\n\tsegments: Segment[],\n\tinitializationUrl: string | undefined,\n): AudioTrack | VideoTrack | TextTrack {\n\tif (!adaptationSet) {\n\t\tthrow new Error('Error: AdaptationSet is undefined');\n\t}\n\tconst type = getContentType(adaptationSet, representation);\n\tif (type === 'video') {\n\t\treturn {\n\t\t\tbandwidth: +(representation.$.bandwidth ?? 0),\n\t\t\tcodec: getCodec(adaptationSet, representation),\n\t\t\tduration: getTrackDuration(segments),\n\t\t\tframeRate: getFrameRate(adaptationSet, representation),\n\t\t\theight: +(representation.$.height ?? 0),\n\t\t\tid: representation.$.id ?? '',\n\t\t\tlanguage: getLanguage(adaptationSet),\n\t\t\tpar: adaptationSet.$.par ?? '',\n\t\t\tsar: getSar(adaptationSet, representation),\n\t\t\tscanType: representation.$.scanType ?? '',\n\t\t\tsegments,\n\t\t\ttype,\n\t\t\twidth: +(representation.$.width ?? 0),\n\t\t\turlInitialization: initializationUrl,\n\t\t} as VideoTrack;\n\t}\n\telse if (type === 'audio') {\n\t\treturn {\n\t\t\tbandwidth: +(representation.$.bandwidth ?? 0),\n\t\t\tchannels: getChannels(adaptationSet, representation),\n\t\t\tcodec: getCodec(adaptationSet, representation),\n\t\t\tduration: getTrackDuration(segments),\n\t\t\tid: representation.$.id ?? '',\n\t\t\tlanguage: getLanguage(adaptationSet),\n\t\t\tsampleRate: getSampleRate(adaptationSet, representation),\n\t\t\tsegments,\n\t\t\ttype,\n\t\t\turlInitialization: initializationUrl,\n\t\t} as AudioTrack;\n\t}\n\telse {\n\t\t// if (type === 'text')\n\t\treturn {\n\t\t\tbandwidth: +(representation.$.bandwidth ?? 0),\n\t\t\tcodec: getCodec(adaptationSet, representation),\n\t\t\tduration: getTrackDuration(segments),\n\t\t\tid: representation.$.id ?? '',\n\t\t\tlanguage: getLanguage(adaptationSet),\n\t\t\tsegments,\n\t\t\ttype,\n\t\t\turlInitialization: initializationUrl,\n\t\t} as TextTrack;\n\t}\n}\n"]}