{"version":3,"file":"getTracksFromPresentation.js","sourceRoot":"","sources":["../../../../../src/cmaf/ham/services/getters/getTracksFromPresentation.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,yBAAyB,EAAE,MAAM,gCAAgC,CAAC;AAE3E;;;;;;;;;GASG;AACH,MAAM,UAAU,yBAAyB,CACxC,YAA0B,EAC1B,SAAqC;IAErC,MAAM,MAAM,GAAG,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE,CAClE,yBAAyB,CAAC,YAAY,CAAC,CACvC,CAAC;IACF,OAAO,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;AACtD,CAAC","sourcesContent":["import type { Presentation } from '../../types/model/Presentation.js';\nimport type { Track } from '../../types/model/Track.js';\n\nimport { getTracksFromSelectionSet } from './getTracksFromSelectionSet.js';\n\n/**\n * Get a list of Tracks contained on a Presentation\n *\n * @param presentation - Presentation object from HAM\n * @param predicate - Filtering function\n * @returns Track[]\n *\n * @group CMAF\n * @alpha\n */\nexport function getTracksFromPresentation(\n\tpresentation: Presentation,\n\tpredicate?: (track: Track) => boolean,\n): Track[] {\n\tconst tracks = presentation.selectionSets.flatMap((selectionSet) =>\n\t\tgetTracksFromSelectionSet(selectionSet),\n\t);\n\treturn predicate ? tracks.filter(predicate) : tracks;\n}\n"]}