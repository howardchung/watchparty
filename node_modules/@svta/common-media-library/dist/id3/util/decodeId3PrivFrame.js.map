{"version":3,"file":"decodeId3PrivFrame.js","sourceRoot":"","sources":["../../../src/id3/util/decodeId3PrivFrame.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAI/D;;;;;;;;;;GAUG;AACH,MAAM,UAAU,kBAAkB,CACjC,KAAkB;IAElB;;MAEE;IACF,IAAI,KAAK,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC;QACpB,OAAO,SAAS,CAAC;IAClB,CAAC;IAED,MAAM,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC/C,MAAM,WAAW,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IAE1E,OAAO,EAAE,GAAG,EAAE,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,WAAW,CAAC,MAAM,EAAE,CAAC;AACnE,CAAC","sourcesContent":["import { utf8ArrayToStr } from '../../utils/utf8ArrayToStr.js';\nimport type { DecodedId3Frame } from '../DecodedId3Frame.js';\nimport type { RawId3Frame } from './RawFrame.js';\n\n/**\n * Decode an ID3 PRIV frame.\n *\n * @param frame - the ID3 PRIV frame\n *\n * @returns The decoded ID3 PRIV frame\n *\n * @internal\n *\n * @group ID3\n */\nexport function decodeId3PrivFrame(\n\tframe: RawId3Frame,\n): DecodedId3Frame<ArrayBuffer> | undefined {\n\t/*\n\tFormat: <text string>\\0<binary data>\n\t*/\n\tif (frame.size < 2) {\n\t\treturn undefined;\n\t}\n\n\tconst owner = utf8ArrayToStr(frame.data, true);\n\tconst privateData = new Uint8Array(frame.data.subarray(owner.length + 1));\n\n\treturn { key: frame.type, info: owner, data: privateData.buffer };\n}\n"]}