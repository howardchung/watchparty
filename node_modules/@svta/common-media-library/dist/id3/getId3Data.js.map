{"version":3,"file":"getId3Data.js","sourceRoot":"","sources":["../../src/id3/getId3Data.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAEpD;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,UAAU,CACzB,IAAgB,EAChB,MAAc;IAEd,MAAM,KAAK,GAAG,MAAM,CAAC;IACrB,IAAI,MAAM,GAAG,CAAC,CAAC;IAEf,OAAO,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC;QAClC,yBAAyB;QACzB,MAAM,IAAI,EAAE,CAAC;QAEb,MAAM,IAAI,GAAG,WAAW,CAAC,IAAI,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;QAC3C,MAAM,IAAI,IAAI,CAAC;QAEf,IAAI,WAAW,CAAC,IAAI,EAAE,MAAM,GAAG,EAAE,CAAC,EAAE,CAAC;YACpC,yBAAyB;YACzB,MAAM,IAAI,EAAE,CAAC;QACd,CAAC;QAED,MAAM,IAAI,MAAM,CAAC;IAClB,CAAC;IAED,IAAI,MAAM,GAAG,CAAC,EAAE,CAAC;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,GAAG,MAAM,CAAC,CAAC;IAC7C,CAAC;IAED,OAAO,SAAS,CAAC;AAClB,CAAC","sourcesContent":["import { isId3Footer } from './util/isId3Footer.js';\nimport { isId3Header } from './util/isId3Header.js';\nimport { readId3Size } from './util/readId3Size.js';\n\n/**\n * Returns any adjacent ID3 tags found in data starting at offset, as one block of data\n *\n * @param data - The data to search in\n * @param offset - The offset at which to start searching\n *\n * @returns The block of data containing any ID3 tags found\n * or `undefined` if no header is found at the starting offset\n *\n * @internal\n *\n * @group ID3\n */\nexport function getId3Data(\n\tdata: Uint8Array,\n\toffset: number,\n): Uint8Array | undefined {\n\tconst front = offset;\n\tlet length = 0;\n\n\twhile (isId3Header(data, offset)) {\n\t\t// ID3 header is 10 bytes\n\t\tlength += 10;\n\n\t\tconst size = readId3Size(data, offset + 6);\n\t\tlength += size;\n\n\t\tif (isId3Footer(data, offset + 10)) {\n\t\t\t// ID3 footer is 10 bytes\n\t\t\tlength += 10;\n\t\t}\n\n\t\toffset += length;\n\t}\n\n\tif (length > 0) {\n\t\treturn data.subarray(front, front + length);\n\t}\n\n\treturn undefined;\n}\n"]}