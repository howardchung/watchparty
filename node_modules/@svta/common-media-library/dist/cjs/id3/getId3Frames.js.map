{"version":3,"file":"getId3Frames.js","sourceRoot":"","sources":["../../../src/id3/getId3Frames.ts"],"names":[],"mappings":";;AAsBA,oCAgCC;AApDD,gEAA0D;AAC1D,kEAA4D;AAC5D,0DAAoD;AACpD,0DAAoD;AACpD,0DAAoD;AAEpD,MAAM,kBAAkB,GAAG,EAAE,CAAC;AAC9B,MAAM,UAAU,GAAG,EAAE,CAAC;AAEtB;;;;;;;;;;GAUG;AACH,SAAgB,YAAY,CAAC,OAAmB;IAC/C,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,MAAM,MAAM,GAAe,EAAE,CAAC;IAE9B,OAAO,IAAA,4BAAW,EAAC,OAAO,EAAE,MAAM,CAAC,EAAE,CAAC;QACrC,MAAM,IAAI,GAAG,IAAA,4BAAW,EAAC,OAAO,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;QAE9C,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC;YACpC,uBAAuB;YACvB,MAAM,IAAI,kBAAkB,CAAC;QAC9B,CAAC;QACD,uBAAuB;QACvB,MAAM,IAAI,kBAAkB,CAAC;QAC7B,MAAM,GAAG,GAAG,MAAM,GAAG,IAAI,CAAC;QAC1B,qCAAqC;QACrC,OAAO,MAAM,GAAG,UAAU,GAAG,GAAG,EAAE,CAAC;YAClC,MAAM,SAAS,GAAgB,IAAA,oCAAe,EAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YACzE,MAAM,KAAK,GAAyB,IAAA,kCAAc,EAAC,SAAS,CAAC,CAAC;YAC9D,IAAI,KAAK,EAAE,CAAC;gBACX,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpB,CAAC;YAED,mCAAmC;YACnC,MAAM,IAAI,SAAS,CAAC,IAAI,GAAG,kBAAkB,CAAC;QAC/C,CAAC;QAED,IAAI,IAAA,4BAAW,EAAC,OAAO,EAAE,MAAM,CAAC,EAAE,CAAC;YAClC,MAAM,IAAI,kBAAkB,CAAC;QAC9B,CAAC;IACF,CAAC;IAED,OAAO,MAAM,CAAC;AACf,CAAC","sourcesContent":["import type { Id3Frame } from './Id3Frame.js';\nimport type { RawId3Frame } from './util/RawFrame.js';\nimport { decodeId3Frame } from './util/decodeId3Frame.js';\nimport { getId3FrameData } from './util/getId3FrameData.js';\nimport { isId3Footer } from './util/isId3Footer.js';\nimport { isId3Header } from './util/isId3Header.js';\nimport { readId3Size } from './util/readId3Size.js';\n\nconst HEADER_FOOTER_SIZE = 10;\nconst FRAME_SIZE = 10;\n\n/**\n * Returns an array of ID3 frames found in all the ID3 tags in the id3Data\n *\n * @param id3Data - The ID3 data containing one or more ID3 tags\n *\n * @returns Array of ID3 frame objects\n *\n * @group ID3\n *\n * @beta\n */\nexport function getId3Frames(id3Data: Uint8Array): Id3Frame[] {\n\tlet offset = 0;\n\tconst frames: Id3Frame[] = [];\n\n\twhile (isId3Header(id3Data, offset)) {\n\t\tconst size = readId3Size(id3Data, offset + 6);\n\n\t\tif ((id3Data[offset + 5] >> 6) & 1) {\n\t\t\t// skip extended header\n\t\t\toffset += HEADER_FOOTER_SIZE;\n\t\t}\n\t\t// skip past ID3 header\n\t\toffset += HEADER_FOOTER_SIZE;\n\t\tconst end = offset + size;\n\t\t// loop through frames in the ID3 tag\n\t\twhile (offset + FRAME_SIZE < end) {\n\t\t\tconst frameData: RawId3Frame = getId3FrameData(id3Data.subarray(offset));\n\t\t\tconst frame: Id3Frame | undefined = decodeId3Frame(frameData);\n\t\t\tif (frame) {\n\t\t\t\tframes.push(frame);\n\t\t\t}\n\n\t\t\t// skip frame header and frame data\n\t\t\toffset += frameData.size + HEADER_FOOTER_SIZE;\n\t\t}\n\n\t\tif (isId3Footer(id3Data, offset)) {\n\t\t\toffset += HEADER_FOOTER_SIZE;\n\t\t}\n\t}\n\n\treturn frames;\n}\n"]}