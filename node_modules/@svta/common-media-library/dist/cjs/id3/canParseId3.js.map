{"version":3,"file":"canParseId3.js","sourceRoot":"","sources":["../../../src/id3/canParseId3.ts"],"names":[],"mappings":";;AAeA,kCAKC;AApBD,0DAAoD;AACpD,0DAAoD;AAEpD;;;;;;;;;;;GAWG;AACH,SAAgB,WAAW,CAAC,IAAgB,EAAE,MAAc;IAC3D,OAAO,CACN,IAAA,4BAAW,EAAC,IAAI,EAAE,MAAM,CAAC;QACzB,IAAA,4BAAW,EAAC,IAAI,EAAE,MAAM,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,GAAG,MAAM,CAC1D,CAAC;AACH,CAAC","sourcesContent":["import { isId3Header } from './util/isId3Header.js';\nimport { readId3Size } from './util/readId3Size.js';\n\n/**\n * Checks if the given data contains an ID3 tag.\n *\n * @param data - The data to check\n * @param offset - The offset at which to start checking\n *\n * @returns `true` if an ID3 tag is found\n *\n * @group ID3\n *\n * @beta\n */\nexport function canParseId3(data: Uint8Array, offset: number): boolean {\n\treturn (\n\t\tisId3Header(data, offset) &&\n\t\treadId3Size(data, offset + 6) + 10 <= data.length - offset\n\t);\n}\n"]}