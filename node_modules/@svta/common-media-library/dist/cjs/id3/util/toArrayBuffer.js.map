{"version":3,"file":"toArrayBuffer.js","sourceRoot":"","sources":["../../../../src/id3/util/toArrayBuffer.ts"],"names":[],"mappings":";;AAWA,sCAcC;AAdD,SAAgB,aAAa,CAAC,IAA8B;IAC3D,IAAI,IAAI,YAAY,WAAW,EAAE,CAAC;QACjC,OAAO,IAAI,CAAC;IACb,CAAC;SACI,CAAC;QACL,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;YACvE,8CAA8C;YAC9C,OAAO,IAAI,CAAC,MAAqB,CAAC;QACnC,CAAC;QACD,0EAA0E;QAC1E,uEAAuE;QACvE,+CAA+C;QAC/C,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;IACpC,CAAC;AACF,CAAC","sourcesContent":["type TypedArray =\n\t| Int8Array\n\t| Uint8Array\n\t| Int16Array\n\t| Uint16Array\n\t| Int32Array\n\t| Uint32Array\n\t| Float32Array\n\t| Float64Array\n\t| Uint8ClampedArray;\n\nexport function toArrayBuffer(view: ArrayBuffer | TypedArray): ArrayBuffer {\n\tif (view instanceof ArrayBuffer) {\n\t\treturn view;\n\t}\n\telse {\n\t\tif (view.byteOffset == 0 && view.byteLength == view.buffer.byteLength) {\n\t\t\t// This is a TypedArray over the whole buffer.\n\t\t\treturn view.buffer as ArrayBuffer;\n\t\t}\n\t\t// This is a 'view' on the buffer.  Create a new buffer that only contains\n\t\t// the data.  Note that since this isn't an ArrayBuffer, the 'new' call\n\t\t// will allocate a new buffer to hold the copy.\n\t\treturn new Uint8Array(view).buffer;\n\t}\n}\n"]}