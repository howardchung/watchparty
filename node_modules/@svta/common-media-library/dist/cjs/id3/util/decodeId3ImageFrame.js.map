{"version":3,"file":"decodeId3ImageFrame.js","sourceRoot":"","sources":["../../../../src/id3/util/decodeId3ImageFrame.ts"],"names":[],"mappings":";;AAcA,kDAsDC;AApED,qEAA+D;AAG/D,yDAAmD;AACnD,uCAAoC;AAUpC,SAAgB,mBAAmB,CAClC,KAAkB;IAElB,MAAM,aAAa,GAAkB;QACpC,GAAG,EAAE,KAAK,CAAC,IAAI;QACf,WAAW,EAAE,EAAE;QACf,IAAI,EAAE,EAAE;QACR,QAAQ,EAAE,IAAI;QACd,WAAW,EAAE,IAAI;KACjB,CAAC;IAEF,MAAM,YAAY,GAAG,IAAI,CAAC;IAE1B,IAAI,KAAK,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC;QACpB,OAAO,SAAS,CAAC;IAClB,CAAC;IACD,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,YAAY,EAAE,CAAC;QACpC,OAAO,CAAC,GAAG,CAAC,2CAA2C,GAAG,UAAU,CAAC,CAAC;QACtE,OAAO,SAAS,CAAC;IAClB,CAAC;IAED,MAAM,gBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAI,gBAAgB,KAAK,CAAC,CAAC,EAAE,CAAC;QAC7B,OAAO,SAAS,CAAC;IAClB,CAAC;IACD,MAAM,QAAQ,GAAG,IAAA,kCAAc,EAAC,IAAA,iBAAO,EAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAC,CAAC;IAC1E,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC;IACrD,MAAM,mBAAmB,GAAG,KAAK,CAAC,IAAI;SACpC,QAAQ,CAAC,CAAC,GAAG,gBAAgB,CAAC;SAC9B,OAAO,CAAC,CAAC,CAAC,CAAC;IACb,IAAI,mBAAmB,KAAK,CAAC,CAAC,EAAE,CAAC;QAChC,OAAO,SAAS,CAAC;IAClB,CAAC;IACD,MAAM,WAAW,GAAG,IAAA,kCAAc,EACjC,IAAA,iBAAO,EAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,gBAAgB,EAAE,mBAAmB,CAAC,CAC9D,CAAC;IAEF,IAAI,IAAI,CAAC;IACT,IAAI,QAAQ,KAAK,KAAK,EAAE,CAAC;QACxB,IAAI,GAAG,IAAA,kCAAc,EACpB,IAAA,iBAAO,EAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,gBAAgB,GAAG,mBAAmB,CAAC,CAC/D,CAAC;IACH,CAAC;SACI,CAAC;QACL,IAAI,GAAG,IAAA,gCAAa,EACnB,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,gBAAgB,GAAG,mBAAmB,CAAC,CAC/D,CAAC;IACH,CAAC;IAED,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAClC,aAAa,CAAC,WAAW,GAAG,WAAW,CAAC;IACxC,aAAa,CAAC,WAAW,GAAG,WAAW,CAAC;IACxC,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC;IAC1B,OAAO,aAAa,CAAC;AACtB,CAAC","sourcesContent":["import { utf8ArrayToStr } from '../../utils/utf8ArrayToStr.js';\nimport type { DecodedId3Frame } from '../DecodedId3Frame.js';\nimport type { RawId3Frame } from './RawFrame.js';\nimport { toArrayBuffer } from './toArrayBuffer.js';\nimport { toUint8 } from './utf8.js';\n\ntype MetadataFrame = {\n\tkey: string;\n\tdescription: string;\n\tdata: string | ArrayBuffer;\n\tmimeType: string | null;\n\tpictureType: number | null;\n};\n\nexport function decodeId3ImageFrame(\n\tframe: RawId3Frame,\n): DecodedId3Frame<string | ArrayBuffer> | undefined {\n\tconst metadataFrame: MetadataFrame = {\n\t\tkey: frame.type,\n\t\tdescription: '',\n\t\tdata: '',\n\t\tmimeType: null,\n\t\tpictureType: null,\n\t};\n\n\tconst utf8Encoding = 0x03;\n\n\tif (frame.size < 2) {\n\t\treturn undefined;\n\t}\n\tif (frame.data[0] !== utf8Encoding) {\n\t\tconsole.log('Ignore frame with unrecognized character ' + 'encoding');\n\t\treturn undefined;\n\t}\n\n\tconst mimeTypeEndIndex = frame.data.subarray(1).indexOf(0);\n\tif (mimeTypeEndIndex === -1) {\n\t\treturn undefined;\n\t}\n\tconst mimeType = utf8ArrayToStr(toUint8(frame.data, 1, mimeTypeEndIndex));\n\tconst pictureType = frame.data[2 + mimeTypeEndIndex];\n\tconst descriptionEndIndex = frame.data\n\t\t.subarray(3 + mimeTypeEndIndex)\n\t\t.indexOf(0);\n\tif (descriptionEndIndex === -1) {\n\t\treturn undefined;\n\t}\n\tconst description = utf8ArrayToStr(\n\t\ttoUint8(frame.data, 3 + mimeTypeEndIndex, descriptionEndIndex),\n\t);\n\n\tlet data;\n\tif (mimeType === '-->') {\n\t\tdata = utf8ArrayToStr(\n\t\t\ttoUint8(frame.data, 4 + mimeTypeEndIndex + descriptionEndIndex),\n\t\t);\n\t}\n\telse {\n\t\tdata = toArrayBuffer(\n\t\t\tframe.data.subarray(4 + mimeTypeEndIndex + descriptionEndIndex),\n\t\t);\n\t}\n\n\tmetadataFrame.mimeType = mimeType;\n\tmetadataFrame.pictureType = pictureType;\n\tmetadataFrame.description = description;\n\tmetadataFrame.data = data;\n\treturn metadataFrame;\n}\n"]}