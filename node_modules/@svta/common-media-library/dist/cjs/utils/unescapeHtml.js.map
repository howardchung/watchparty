{"version":3,"file":"unescapeHtml.js","sourceRoot":"","sources":["../../../src/utils/unescapeHtml.ts"],"names":[],"mappings":";;AAeA,oCAwBC;AAvCD,MAAM,WAAW,GAAG,4DAA4D,CAAC;AAEjF;;;;;;;;;;;;GAYG;AACH,SAAgB,YAAY,CAAC,IAAY;IACxC,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;QAC9B,OAAO,IAAI,CAAC;IACb,CAAC;IAED,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,EAAE;QAC1C,QAAQ,KAAK,EAAE,CAAC;YACf,KAAK,OAAO,CAAC,CAAC,OAAO,GAAG,CAAC;YACzB,KAAK,MAAM,CAAC,CAAC,OAAO,GAAG,CAAC;YACxB,KAAK,MAAM,CAAC,CAAC,OAAO,GAAG,CAAC;YACxB,KAAK,QAAQ,CAAC,CAAC,OAAO,GAAG,CAAC;YAC1B,KAAK,QAAQ,CAAC,CAAC,OAAO,IAAI,CAAC;YAC3B,KAAK,QAAQ,CAAC,CAAC,OAAO,QAAQ,CAAC;YAC/B,KAAK,OAAO,CAAC,CAAC,OAAO,UAAU,CAAC;YAChC,KAAK,OAAO,CAAC,CAAC,OAAO,UAAU,CAAC;YAChC,OAAO,CAAC,CAAC,CAAC;gBACT,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;oBACtB,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;oBAChH,OAAO,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;gBACnC,CAAC;gBACD,OAAO,KAAK,CAAC;YACd,CAAC;QACF,CAAC;IACF,CAAC,CAAC,CAAC;AACJ,CAAC","sourcesContent":["const escapedHtml = /&(?:amp|lt|gt|quot|apos|nbsp|lrm|rlm|#[xX]?[0-9a-fA-F]+);/g;\n\n/**\n * Unescapes HTML entities\n *\n * @param text - The text to unescape\n * @returns The unescaped text\n *\n * @group Utils\n *\n * @beta\n *\n * @example\n * {@includeCode ../../test/utils/unescapeHtml.test.ts#example}\n */\nexport function unescapeHtml(text: string): string {\n\tif (text.indexOf('&') === -1) {\n\t\treturn text;\n\t}\n\n\treturn text.replace(escapedHtml, (match) => {\n\t\tswitch (match) {\n\t\t\tcase '&amp;': return '&';\n\t\t\tcase '&lt;': return '<';\n\t\t\tcase '&gt;': return '>';\n\t\t\tcase '&quot;': return '\"';\n\t\t\tcase '&apos;': return '\\'';\n\t\t\tcase '&nbsp;': return '\\u{a0}';\n\t\t\tcase '&lrm;': return '\\u{200e}';\n\t\t\tcase '&rlm;': return '\\u{200f}';\n\t\t\tdefault: {\n\t\t\t\tif (match[1] === '#') {\n\t\t\t\t\tconst code = match[2] === 'x' || match[2] === 'X' ? parseInt(match.slice(3), 16) : parseInt(match.slice(2), 10);\n\t\t\t\t\treturn String.fromCodePoint(code);\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t}\n\t\t}\n\t});\n}\n"]}