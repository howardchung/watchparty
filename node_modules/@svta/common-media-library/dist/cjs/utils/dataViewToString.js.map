{"version":3,"file":"dataViewToString.js","sourceRoot":"","sources":["../../../src/utils/dataViewToString.ts"],"names":[],"mappings":";;AAiBA,4CAgDC;AAhED,yCAAmC;AAEnC;;;;;;;;;;;;;GAaG;AACH,SAAgB,gBAAgB,CAAC,QAAkB,EAAE,WAAqB,gBAAK;IAC9E,IAAI,OAAO,WAAW,KAAK,WAAW,EAAE,CAAC;QACxC,OAAO,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACnD,CAAC;IAED,MAAM,CAAC,GAAa,EAAE,CAAC;IACvB,IAAI,CAAC,GAAG,CAAC,CAAC;IAEV,IAAI,QAAQ,KAAK,gBAAK,EAAE,CAAC;QACxB;;UAEE;QAEF,OAAO,CAAC,GAAG,QAAQ,CAAC,UAAU,EAAE,CAAC;YAChC,IAAI,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;YAE/B,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC;gBACd,4BAA4B;YAC7B,CAAC;iBACI,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC;gBACnB,6BAA6B;gBAC7B,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;gBACpB,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;YACtC,CAAC;iBACI,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC;gBACnB,6BAA6B;gBAC7B,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;gBACpB,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC1C,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;YACtC,CAAC;iBACI,CAAC;gBACL,6BAA6B;gBAC7B,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;gBACpB,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;gBAC3C,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC1C,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;YACtC,CAAC;YAED,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QAChC,CAAC;IACF,CAAC;SACI,CAAC,CAAC,yCAAyC;QAC/C,OAAO,CAAC,GAAG,QAAQ,CAAC,UAAU,EAAE,CAAC;YAChC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACrD,CAAC;IACF,CAAC;IAED,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACnB,CAAC;AAAA,CAAC","sourcesContent":["import type { Encoding } from './Encoding.js';\nimport { UTF_8 } from './UTF_8.js';\n\n/**\n * Converts a DataView to a string.\n *\n * @param dataView - The DataView to convert.\n * @param encoding - The encoding to use.\n * @returns The string representation of the DataView.\n *\n * @group Utils\n *\n * @beta\n *\n * @example\n * {@includeCode ../../test/utils/dataViewToString.test.ts#example}\n */\nexport function dataViewToString(dataView: DataView, encoding: Encoding = UTF_8): string {\n\tif (typeof TextDecoder !== 'undefined') {\n\t\treturn new TextDecoder(encoding).decode(dataView);\n\t}\n\n\tconst a: string[] = [];\n\tlet i = 0;\n\n\tif (encoding === UTF_8) {\n\t\t/* The following algorithm is essentially a rewrite of the UTF8.decode at\n\t\thttp://bannister.us/weblog/2007/simple-base64-encodedecode-javascript/\n\t\t*/\n\n\t\twhile (i < dataView.byteLength) {\n\t\t\tlet c = dataView.getUint8(i++);\n\n\t\t\tif (c < 0x80) {\n\t\t\t\t// 1-byte character (7 bits)\n\t\t\t}\n\t\t\telse if (c < 0xe0) {\n\t\t\t\t// 2-byte character (11 bits)\n\t\t\t\tc = (c & 0x1f) << 6;\n\t\t\t\tc |= (dataView.getUint8(i++) & 0x3f);\n\t\t\t}\n\t\t\telse if (c < 0xf0) {\n\t\t\t\t// 3-byte character (16 bits)\n\t\t\t\tc = (c & 0xf) << 12;\n\t\t\t\tc |= (dataView.getUint8(i++) & 0x3f) << 6;\n\t\t\t\tc |= (dataView.getUint8(i++) & 0x3f);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// 4-byte character (21 bits)\n\t\t\t\tc = (c & 0x7) << 18;\n\t\t\t\tc |= (dataView.getUint8(i++) & 0x3f) << 12;\n\t\t\t\tc |= (dataView.getUint8(i++) & 0x3f) << 6;\n\t\t\t\tc |= (dataView.getUint8(i++) & 0x3f);\n\t\t\t}\n\n\t\t\ta.push(String.fromCharCode(c));\n\t\t}\n\t}\n\telse { // Just map byte-by-byte (probably wrong)\n\t\twhile (i < dataView.byteLength) {\n\t\t\ta.push(String.fromCharCode(dataView.getUint8(i++)));\n\t\t}\n\t}\n\n\treturn a.join('');\n};\n"]}