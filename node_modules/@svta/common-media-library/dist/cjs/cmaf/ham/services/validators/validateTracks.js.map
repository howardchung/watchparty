{"version":3,"file":"validateTracks.js","sourceRoot":"","sources":["../../../../../../src/cmaf/ham/services/validators/validateTracks.ts"],"names":[],"mappings":";;AA8BA,wCA4BC;AAvDD,yDAAmD;AAEnD;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,SAAgB,cAAc,CAC7B,MAAe,EACf,cAAuB,EACvB,cAA2B;IAE3B,MAAM,UAAU,GAAe,cAAc,aAAd,cAAc,cAAd,cAAc,GAAI;QAChD,MAAM,EAAE,IAAI;QACZ,aAAa,EAAE,EAAE;KACjB,CAAC;IACF,MAAM,eAAe,GAAG,cAAc;QACrC,CAAC,CAAC,mCAAmC,cAAc,EAAE;QACrD,CAAC,CAAC,GAAG,CAAC;IACP,IAAI,cAAsB,CAAC;IAE3B,MAAM,CAAC,OAAO,CAAC,CAAC,KAAY,EAAE,EAAE;QAC/B,IAAI,CAAC,cAAc,EAAE,CAAC;YACrB,cAAc,GAAG,KAAK,CAAC,QAAQ,CAAC;QACjC,CAAC;QACD,IAAI,cAAc,KAAK,KAAK,CAAC,QAAQ,EAAE,CAAC;YACvC,UAAU,CAAC,MAAM,GAAG,KAAK,CAAC;YAC1B,UAAU,CAAC,aAAa,CAAC,IAAI,CAC5B,6CAA6C,eAAe,EAAE,CAC9D,CAAC;QACH,CAAC;QACD,IAAA,gCAAa,EAAC,KAAK,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,OAAO,UAAU,CAAC;AACnB,CAAC","sourcesContent":["import type { Track } from '../../types/model/Track.js';\nimport type { Validation } from '../../types/Validation.js';\n\nimport { validateTrack } from './validateTrack.js';\n\n/**\n * Validate a list of tracks.\n * It validates in cascade, calling each child validation method.\n *\n * @example\n * ```ts\n * import cmaf, { Track } from '@svta/common-media-library/cmaf-ham';\n * ...\n *\n * // const tracks: Track[] = ...;\n *\n * const validation = cmaf.validateTracks(tracks);\n * ```\n *\n * Example output: `{ status: true|false, errorMessages: [...] }`\n *\n * @param tracks - List of Track from cmaf ham model\n * @param switchingSetId - Optional: parent switching set id\n * @param prevValidation - Optional: validation object from parent previous validate method call\n * @returns Validation\n *\n * @group CMAF\n * @alpha\n *\n */\nexport function validateTracks(\n\ttracks: Track[],\n\tswitchingSetId?: string,\n\tprevValidation?: Validation,\n): Validation {\n\tconst validation: Validation = prevValidation ?? {\n\t\tstatus: true,\n\t\terrorMessages: [],\n\t};\n\tconst moreInformation = switchingSetId\n\t\t? ` in the switching set with id = ${switchingSetId}`\n\t\t: '.';\n\tlet tracksDuration: number;\n\n\ttracks.forEach((track: Track) => {\n\t\tif (!tracksDuration) {\n\t\t\ttracksDuration = track.duration;\n\t\t}\n\t\tif (tracksDuration !== track.duration) {\n\t\t\tvalidation.status = false;\n\t\t\tvalidation.errorMessages.push(\n\t\t\t\t`All the tracks must have the same duration${moreInformation}`,\n\t\t\t);\n\t\t}\n\t\tvalidateTrack(track, switchingSetId, validation);\n\t});\n\n\treturn validation;\n}\n"]}