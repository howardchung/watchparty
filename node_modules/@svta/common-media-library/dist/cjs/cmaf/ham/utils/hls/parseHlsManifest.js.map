{"version":3,"file":"parseHlsManifest.js","sourceRoot":"","sources":["../../../../../../src/cmaf/ham/utils/hls/parseHlsManifest.ts"],"names":[],"mappings":";;AASA,oCAEC;AAKD,oCAEC;AAED,4CAOC;AAvBD,IAAI,SAAoB,CAAC;AAEzB;;GAEG;AACH,SAAgB,YAAY,CAAC,MAAiB;IAC7C,SAAS,GAAG,MAAM,CAAC;AACpB,CAAC;AAED;;GAEG;AACH,SAAgB,YAAY;IAC3B,OAAO,SAAS,CAAC;AAClB,CAAC;AAED,SAAgB,gBAAgB,CAAC,IAAa;IAC7C,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,OAAO,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;QAChD,OAAO,EAAiB,CAAC;IAC1B,CAAC;IAED,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC;AACxB,CAAC","sourcesContent":["import type { HlsManifest } from '../../types/mapper/hls/HlsManifest.js';\n\nexport type HlsParser = (text: string) => HlsManifest;\n\nlet hlsParser: HlsParser;\n\n/**\n * @internal\n */\nexport function setHlsParser(parser: HlsParser): void {\n\thlsParser = parser;\n}\n\n/**\n * @internal\n */\nexport function getHlsParser(): HlsParser {\n\treturn hlsParser;\n}\n\nexport function parseHlsManifest(text?: string): HlsManifest {\n\tif (!text) {\n\t\tconsole.error(\"Can't parse empty HLS Manifest\");\n\t\treturn {} as HlsManifest;\n\t}\n\n\treturn hlsParser(text);\n}\n"]}