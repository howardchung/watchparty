{"version":3,"file":"mapSegments.js","sourceRoot":"","sources":["../../../../../../../src/cmaf/ham/mapper/dash/mapDashToHam/mapSegments.ts"],"names":[],"mappings":";;AA0BA,kCAuBC;AA1CD,2DAAqD;AACrD,2DAAqD;AACrD,mEAA6D;AAE7D;;;;;;;;;;;;;;GAcG;AACH,SAAgB,WAAW,CAC1B,aAA4B,EAC5B,cAA8B,EAC9B,QAAgB;;IAEhB,MAAM,eAAe,GACpB,MAAA,MAAA,aAAa,CAAC,eAAe,0CAAE,EAAE,CAAC,CAAC,CAAC,mCACpC,MAAA,cAAc,CAAC,eAAe,0CAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACvC,MAAM,WAAW,GAChB,MAAA,aAAa,CAAC,WAAW,mCAAI,cAAc,CAAC,WAAW,CAAC;IACzD,IAAI,cAAc,CAAC,WAAW,EAAE,CAAC;QAChC,OAAO,IAAA,kCAAc,EAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IACjD,CAAC;SACI,IAAI,WAAW,EAAE,CAAC;QACtB,OAAO,IAAA,kCAAc,EAAC,WAAW,CAAC,CAAC;IACpC,CAAC;SACI,IAAI,eAAe,EAAE,CAAC;QAC1B,OAAO,IAAA,0CAAkB,EAAC,cAAc,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC;IACtE,CAAC;SACI,CAAC;QACL,OAAO,CAAC,KAAK,CAAC,kBAAkB,cAAc,CAAC,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC;QACvE,OAAO,EAAe,CAAC;IACxB,CAAC;AACF,CAAC","sourcesContent":["import type { AdaptationSet } from '../../../types/mapper/dash/AdaptationSet.js';\nimport type { Representation } from '../../../types/mapper/dash/Representation.js';\nimport type { SegmentList } from '../../../types/mapper/dash/SegmentList.js';\nimport type { SegmentTemplate } from '../../../types/mapper/dash/SegmentTemplate.js';\n\nimport type { Segment } from '../../../types/model/Segment.js';\n\nimport { mapSegmentBase } from './mapSegmentBase.js';\nimport { mapSegmentList } from './mapSegmentList.js';\nimport { mapSegmentTemplate } from './mapSegmentTemplate.js';\n\n/**\n * @internal\n *\n * Maps dash segments to ham segment.\n *\n * Checks the type of dash segments used to map them accordingly.\n * @see mapSegmentBase\n * @see mapSegmentList\n * @see mapSegmentTemplate\n *\n * @param adaptationSet - AdaptationSet to get the segments from\n * @param representation - Representation to get the segments from\n * @param duration - Duration of the segments\n * @returns list of ham segments\n */\nexport function mapSegments(\n\tadaptationSet: AdaptationSet,\n\trepresentation: Representation,\n\tduration: number,\n): Segment[] {\n\tconst segmentTemplate: SegmentTemplate | undefined =\n\t\tadaptationSet.SegmentTemplate?.at(0) ??\n\t\trepresentation.SegmentTemplate?.at(0);\n\tconst segmentList: SegmentList[] | undefined =\n\t\tadaptationSet.SegmentList ?? representation.SegmentList;\n\tif (representation.SegmentBase) {\n\t\treturn mapSegmentBase(representation, duration);\n\t}\n\telse if (segmentList) {\n\t\treturn mapSegmentList(segmentList);\n\t}\n\telse if (segmentTemplate) {\n\t\treturn mapSegmentTemplate(representation, duration, segmentTemplate);\n\t}\n\telse {\n\t\tconsole.error(`Representation ${representation.$.id} has no segments`);\n\t\treturn [] as Segment[];\n\t}\n}\n"]}