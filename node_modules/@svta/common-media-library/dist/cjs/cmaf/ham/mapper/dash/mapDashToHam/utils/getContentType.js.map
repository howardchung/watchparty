{"version":3,"file":"getContentType.js","sourceRoot":"","sources":["../../../../../../../../src/cmaf/ham/mapper/dash/mapDashToHam/utils/getContentType.ts"],"names":[],"mappings":";;AAaA,wCAgCC;AA1CD;;;;;;;;;GASG;AACH,SAAgB,cAAc,CAC7B,aAA4B,EAC5B,cAA+B;;IAE/B,IAAI,aAAa,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QACjC,OAAO,aAAa,CAAC,CAAC,CAAC,WAAW,CAAC;IACpC,CAAC;IACD,IAAI,MAAA,aAAa,CAAC,gBAAgB,0CAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAC3C,OAAO,aAAa,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,WAAW,CAAC;IAC5D,CAAC;IACD,IAAI,aAAa,CAAC,CAAC,CAAC,QAAQ,KAAI,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,CAAC,CAAC,QAAQ,CAAA,EAAE,CAAC;QAC5D,MAAM,IAAI,GACT,CAAA,MAAA,aAAa,CAAC,CAAC,CAAC,QAAQ,0CAAE,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;aACvC,MAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,CAAC,CAAC,QAAQ,0CAAE,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA,CAAC;QAC3C,IAAI,IAAI,KAAK,OAAO,IAAI,IAAI,KAAK,OAAO,IAAI,IAAI,KAAK,MAAM,EAAE,CAAC;YAC7D,OAAO,IAAI,CAAC;QACb,CAAC;QACD,IAAI,IAAI,KAAK,aAAa,EAAE,CAAC;YAC5B,OAAO,MAAM,CAAC;QACf,CAAC;IACF,CAAC;IACD,IAAI,aAAa,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QAC/B,OAAO,OAAO,CAAC;IAChB,CAAC;IACD,MAAM,aAAa,GAClB,MAAA,aAAa,CAAC,CAAC,CAAC,EAAE,mCAClB,UAAU,aAAa,CAAC,CAAC,CAAC,KAAK,WAAW,aAAa,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IAClE,OAAO,CAAC,KAAK,CACZ,iDAAiD,aAAa,EAAE,CAChE,CAAC;IACF,OAAO,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;IACpD,OAAO,MAAM,CAAC;AACf,CAAC","sourcesContent":["import type { AdaptationSet } from '../../../../types/mapper/dash/AdaptationSet.js';\nimport type { Representation } from '../../../../types/mapper/dash/Representation.js';\n\n/**\n * @internal\n *\n * Get the type of the content. It can be obtained directly from AdaptationSet or Representation\n * or can be inferred with the existing properties.\n *\n * @param adaptationSet - AdaptationSet to get the type from\n * @param representation - Representation to get the type from\n * @returns type of the content\n */\nexport function getContentType(\n\tadaptationSet: AdaptationSet,\n\trepresentation?: Representation,\n): string {\n\tif (adaptationSet.$.contentType) {\n\t\treturn adaptationSet.$.contentType;\n\t}\n\tif (adaptationSet.ContentComponent?.at(0)) {\n\t\treturn adaptationSet.ContentComponent.at(0)!.$.contentType;\n\t}\n\tif (adaptationSet.$.mimeType || representation?.$.mimeType) {\n\t\tconst type =\n\t\t\tadaptationSet.$.mimeType?.split('/')[0] ||\n\t\t\trepresentation?.$.mimeType?.split('/')[0];\n\t\tif (type === 'audio' || type === 'video' || type === 'text') {\n\t\t\treturn type;\n\t\t}\n\t\tif (type === 'application') {\n\t\t\treturn 'text';\n\t\t}\n\t}\n\tif (adaptationSet.$.maxHeight) {\n\t\treturn 'video';\n\t}\n\tconst adaptationRef =\n\t\tadaptationSet.$.id ??\n\t\t`group: ${adaptationSet.$.group}, lang: ${adaptationSet.$.lang}`;\n\tconsole.error(\n\t\t`Could not find contentType from adaptationSet ${adaptationRef}`,\n\t);\n\tconsole.info('Using \"text\" as default contentType');\n\treturn 'text';\n}\n"]}