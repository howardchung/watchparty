{"version":3,"file":"getUrlFromTemplate.js","sourceRoot":"","sources":["../../../../../../../../src/cmaf/ham/mapper/dash/mapDashToHam/utils/getUrlFromTemplate.ts"],"names":[],"mappings":";;AAiBA,gDAwBC;AAtCD;;;;;;;;;;;;;GAaG;AACH,SAAgB,kBAAkB,CACjC,cAA8B,EAC9B,eAAgC,EAChC,SAAiB;IAEjB,MAAM,aAAa,GAAG,YAAY,CAAC;IACnC,OAAO,eAAe,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,KAAU,EAAE,EAAE;QACpE,IAAI,KAAK,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,CAAC;YACxC,OAAO,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC;QAC5B,CAAC;QACD;;WAEG;QACH,IAAI,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;YAClC,OAAO,SAAS,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAC9C,CAAC;QACD,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC9B,OAAO,SAAS,CAAC;QAClB,CAAC;QACD,OAAO,CAAC,KAAK,CACZ,oBAAoB,KAAK,+CAA+C,cAAc,CAAC,CAAC,CAAC,EAAE,EAAE,CAC7F,CAAC;QACF,OAAO,KAAK,CAAC;IACd,CAAC,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import type { Representation } from '../../../../types/mapper/dash/Representation.js';\nimport type { SegmentTemplate } from '../../../../types/mapper/dash/SegmentTemplate.js';\n\n/**\n * @internal\n *\n * Create the url from a segment template.\n *\n * Searches for substrings with the format `$value$` and replaces it with the correct value.\n * - RepresentationID: id of the representation\n * - Number: id of the segment. `%0Xd` defines the number `X` of digits it needs to have\n *\n * @param representation - Representation of the template\n * @param segmentTemplate - Segment template\n * @param segmentId - Segment id\n * @returns url from the segment template\n */\nexport function getUrlFromTemplate(\n\trepresentation: Representation,\n\tsegmentTemplate: SegmentTemplate,\n\tsegmentId: number,\n): string {\n\tconst regexTemplate = /\\$(.*?)\\$/g;\n\treturn segmentTemplate.$.media.replace(regexTemplate, (match: any) => {\n\t\tif (match.includes('RepresentationID')) {\n\t\t\treturn representation.$.id;\n\t\t}\n\t\t/**\n\t\t * Number with 4 digits e.g: 0001\n\t\t */\n\t\tif (match.includes('Number%04d')) {\n\t\t\treturn segmentId.toString().padStart(4, '0');\n\t\t}\n\t\tif (match.includes('Number')) {\n\t\t\treturn segmentId;\n\t\t}\n\t\tconsole.error(\n\t\t\t`Unknown property ${match} from the SegmentTemplate on representation ${representation.$.id}`,\n\t\t);\n\t\treturn match;\n\t});\n}\n"]}