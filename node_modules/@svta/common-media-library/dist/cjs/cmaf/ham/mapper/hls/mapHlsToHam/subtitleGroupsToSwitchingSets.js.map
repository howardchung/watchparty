{"version":3,"file":"subtitleGroupsToSwitchingSets.js","sourceRoot":"","sources":["../../../../../../../src/cmaf/ham/mapper/hls/mapHlsToHam/subtitleGroupsToSwitchingSets.ts"],"names":[],"mappings":";;AAWA,sEAqCC;AA3CD,gFAA0E;AAE1E,iEAA2D;AAC3D,qDAA+C;AAC/C,2DAAqD;AAErD,SAAgB,6BAA6B,CAC5C,oBAAyB,EACzB,iBAA6B;;IAE7B,MAAM,qBAAqB,GAAmB,EAAE,CAAC;IACjD,MAAM,UAAU,GAAgB,EAAE,CAAC;IAEnC,sCAAsC;IACtC,KAAK,MAAM,iBAAiB,IAAI,oBAAoB,EAAE,CAAC;QACtD,MAAM,SAAS,GAAG,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;QAC1D,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;YAClC,MAAM,UAAU,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;YACvC,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,GAAG,UAAU,CAAC;YACrC,MAAM,cAAc,GAAG,IAAA,sCAAgB,EACtC,MAAA,iBAAiB,CAAC,KAAK,EAAE,0CAAE,QAAQ,CACnC,CAAC;YACF,MAAM,QAAQ,GAAG,IAAA,kCAAc,EAAC,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,QAAQ,CAAC,CAAC;YAE1D,UAAU,CAAC,IAAI,CAAC;gBACf,EAAE,EAAE,QAAQ;gBACZ,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,GAAG;gBACb,KAAK,EAAE,IAAA,sBAAQ,EAAC,MAAM,CAAC;gBACvB,QAAQ,EAAE,IAAA,4BAAW,EAAC,cAAc,EAAE,QAAQ,CAAC;gBAC/C,QAAQ,EAAE,QAAQ;gBAClB,SAAS,EAAE,CAAC;gBACZ,QAAQ,EAAE,QAAQ;aACL,CAAC,CAAC;QACjB,CAAC;IACF,CAAC;IAED,qBAAqB,CAAC,IAAI,CAAC;QAC1B,EAAE,EAAE,MAAM;QACV,MAAM,EAAE,UAAU;KACF,CAAC,CAAC;IAEnB,OAAO,qBAAqB,CAAC;AAC9B,CAAC","sourcesContent":["import type { SwitchingSet } from '../../../types/model/SwitchingSet.js';\nimport type { TextTrack } from '../../../types/model/TextTrack.js';\n\nimport type { Manifest } from '../../../types/manifest/Manifest.js';\n\nimport { parseHlsManifest } from '../../../utils/hls/parseHlsManifest.js';\n\nimport { formatSegments } from './utils/formatSegments.js';\nimport { getCodec } from './utils/getCodec.js';\nimport { getDuration } from './utils/getDuration.js';\n\nexport function subtitleGroupsToSwitchingSets(\n\tmediaGroupsSubtitles: any,\n\tmanifestPlaylists: Manifest[],\n): SwitchingSet[] {\n\tconst subtitleSwitchingSets: SwitchingSet[] = [];\n\tconst textTracks: TextTrack[] = [];\n\n\t// Add selection set of type subtitles\n\tfor (const subtitleEncodings in mediaGroupsSubtitles) {\n\t\tconst encodings = mediaGroupsSubtitles[subtitleEncodings];\n\t\tfor (const subtitle in encodings) {\n\t\t\tconst attributes = encodings[subtitle];\n\t\t\tconst { language, uri } = attributes;\n\t\t\tconst subtitleParsed = parseHlsManifest(\n\t\t\t\tmanifestPlaylists.shift()?.manifest,\n\t\t\t);\n\t\t\tconst segments = formatSegments(subtitleParsed?.segments);\n\n\t\t\ttextTracks.push({\n\t\t\t\tid: subtitle,\n\t\t\t\ttype: 'text',\n\t\t\t\tfileName: uri,\n\t\t\t\tcodec: getCodec('text'),\n\t\t\t\tduration: getDuration(subtitleParsed, segments),\n\t\t\t\tlanguage: language,\n\t\t\t\tbandwidth: 0,\n\t\t\t\tsegments: segments,\n\t\t\t} as TextTrack);\n\t\t}\n\t}\n\n\tsubtitleSwitchingSets.push({\n\t\tid: 'text',\n\t\ttracks: textTracks,\n\t} as SwitchingSet);\n\n\treturn subtitleSwitchingSets;\n}\n"]}