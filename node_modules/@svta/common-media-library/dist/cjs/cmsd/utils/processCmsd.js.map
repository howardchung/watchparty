{"version":3,"file":"processCmsd.js","sourceRoot":"","sources":["../../../../src/cmsd/utils/processCmsd.ts"],"names":[],"mappings":";;AAOA,kCA+BC;AArCD,qEAA+D;AAC/D,2DAAqD;AACrD,iEAA2D;AAI3D,SAAgB,WAAW,CAAC,GAAe,EAAE,OAA2B;IACvE,MAAM,OAAO,GAAe,EAAE,CAAC;IAE/B,IAAI,GAAG,IAAI,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;QAC5C,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAyB,CAAC;IACtD,MAAM,SAAS,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,MAAK,KAAK,CAAC;IAE/C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAClB,IAAI,KAAK,GAAG,GAAG,CAAC,GAAG,CAAY,CAAC;QAEhC,qDAAqD;QACrD,IAAI,GAAG,KAAK,GAAG,IAAI,KAAK,KAAK,CAAC,EAAE,CAAC;YAChC,OAAO;QACR,CAAC;QAED,wBAAwB;QACxB,IAAI,CAAC,IAAA,oBAAO,EAAC,KAAK,CAAC,EAAE,CAAC;YACrB,OAAO;QACR,CAAC;QAED,IAAI,IAAA,8BAAY,EAAC,GAAG,CAAC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YACpD,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,oBAAO,CAAC,KAAK,CAAC,CAAC;QAC5D,CAAC;QAED,OAAO,CAAC,GAAU,CAAC,GAAG,KAAY,CAAC;IACpC,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AAChB,CAAC","sourcesContent":["import type { CmValue } from '../../cta/CmValue.js';\nimport { isTokenField } from '../../cta/utils/isTokenField.js';\nimport { isValid } from '../../cta/utils/isValid.js';\nimport { SfToken } from '../../structuredfield/SfToken.js';\nimport type { CmsdEncodeOptions } from '../CmsdEncodeOptions.js';\nimport type { CmsdStatic } from '../CmsdStatic.js';\n\nexport function processCmsd(obj: CmsdStatic, options?: CmsdEncodeOptions): CmsdStatic {\n\tconst results: CmsdStatic = {};\n\n\tif (obj == null || typeof obj !== 'object') {\n\t\treturn results;\n\t}\n\n\tconst keys = Object.keys(obj) as (keyof CmsdStatic)[];\n\tconst useSymbol = options?.useSymbol !== false;\n\n\tkeys.forEach(key => {\n\t\tlet value = obj[key] as CmValue;\n\n\t\t// Version should only be reported if not equal to 1.\n\t\tif (key === 'v' && value === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t// ignore invalid values\n\t\tif (!isValid(value)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (isTokenField(key) && typeof value === 'string') {\n\t\t\tvalue = useSymbol ? Symbol.for(value) : new SfToken(value);\n\t\t}\n\n\t\tresults[key as any] = value as any;\n\t});\n\n\treturn results;\n}\n"]}