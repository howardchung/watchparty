{"version":3,"file":"getKeySystemAccess.js","sourceRoot":"","sources":["../../../../src/drm/keysystem/getKeySystemAccess.ts"],"names":[],"mappings":";;AAYA,gDAYC;AArBD;;;;;;;;GAQG;AACI,KAAK,UAAU,kBAAkB,CACvC,gBAAwE;IAExE,KAAK,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,gBAAgB,EAAE,CAAC;QAChD,IAAI,CAAC;YACJ,OAAO,MAAM,SAAS,CAAC,2BAA2B,CAAC,EAAE,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;QAC9E,CAAC;QACD,MAAM,CAAC;YACN,sCAAsC;QACvC,CAAC;IACF,CAAC;IACD,OAAO,IAAI,CAAC;AACb,CAAC","sourcesContent":["import type { KeySystem } from '../common/KeySystem.js';\nimport type { KeySystemConfiguration } from '../common/KeySystemConfiguration.js';\n\n/**\n * Attempts to get key system access using requestMediaKeySystemAccess from EME.\n *\n * @param ksConfigurations - An array of key system configurations.\n * @returns MediaKeySystemAccess object if successful, or null if no system is supported.\n *\n * @group DRM\n * @beta\n */\nexport async function getKeySystemAccess(\n\tksConfigurations: { ks: KeySystem; configs: KeySystemConfiguration[] }[],\n): Promise<MediaKeySystemAccess | null> {\n\tfor (const { ks, configs } of ksConfigurations) {\n\t\ttry {\n\t\t\treturn await navigator.requestMediaKeySystemAccess(ks.systemString, configs);\n\t\t}\n\t\tcatch {\n\t\t\t// legacy approach ccould be used here\n\t\t}\n\t}\n\treturn null;\n}\n"]}