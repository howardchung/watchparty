{"version":3,"file":"getId.js","sourceRoot":"","sources":["../../../../src/drm/fairplay/getId.ts"],"names":[],"mappings":";;AAiBA,sBAWC;AA5BD,+DAAyD;AAEzD;;;;;;;;;;;;;GAaG;AAEH,SAAgB,KAAK,CAAC,gBAAwB,EAAE,QAAqB,EAAE,aAAqB,WAAW;IACtG,IAAI,CAAC;QACJ,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,gBAAgB,CAAC,CAAC;QACtC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC/C,OAAO,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,IAAA,sCAAgB,EAAC,QAAQ,CAAC,CAAC;IAC7D,CAAC;IACD,MAAM,CAAC;QACN,gCAAgC;QAChC,uCAAuC;QACvC,OAAO,IAAA,sCAAgB,EAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;AACF,CAAC","sourcesContent":["import { extractContentId } from './extractContentId.js';\n\n/**\n * Extracts the content ID from the license server URL or InitData.\n *\n * @param licenseServerUrl - The license server URL\n * @param initData - The initialization data (PSSH box)\n * @param queryParam - The query parameter key to extract (default: 'ContentId')\n * @returns The extracted content ID as a string or null if not found\n *\n * @group DRM\n * @beta\n *\n * @example\n * {@includeCode ../../../test/drm/fairplay/getId.test.ts#example}\n */\n\nexport function getId(licenseServerUrl: string, initData: Uint16Array, queryParam: string = 'ContentId'): string {\n\ttry {\n\t\tconst url = new URL(licenseServerUrl);\n\t\tconst params = new URLSearchParams(url.search);\n\t\treturn params.get(queryParam) || extractContentId(initData);\n\t}\n\tcatch {\n\t\t// in case if URL parsing fails,\n\t\t// fallback to extracting from initData\n\t\treturn extractContentId(initData);\n\t}\n}\n"]}