{"version":3,"file":"decodeSfItem.js","sourceRoot":"","sources":["../../../src/structuredfield/decodeSfItem.ts"],"names":[],"mappings":";;AAqCA,oCAYC;AA/CD,yDAAmD;AACnD,uDAAiD;AACjD,6CAAuC;AAEvC,kCAAkC;AAClC,EAAE;AACF,gEAAgE;AAChE,sCAAsC;AACtC,EAAE;AACF,2DAA2D;AAC3D,EAAE;AACF,mEAAmE;AACnE,wDAAwD;AACxD,EAAE;AACF,iEAAiE;AACjE,sEAAsE;AACtE,EAAE;AACF,mEAAmE;AACnE,yDAAyD;AACzD,EAAE;AACF,2DAA2D;AAC3D,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,gCAAgC;AAChC;;;;;;;;;GASG;AACH,SAAgB,YAAY,CAAC,KAAa,EAAE,OAAyB;IACpE,IAAI,CAAC;QACJ,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,IAAA,wBAAS,EAAC,KAAK,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;QACxD,IAAI,GAAG,KAAK,EAAE,EAAE,CAAC;YAChB,MAAM,IAAA,0BAAU,EAAC,GAAG,EAAE,cAAI,CAAC,CAAC;QAC7B,CAAC;QAED,OAAO,KAAK,CAAC;IACd,CAAC;IACD,OAAO,KAAK,EAAE,CAAC;QACd,MAAM,IAAA,0BAAU,EAAC,KAAK,EAAE,cAAI,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC;AACF,CAAC","sourcesContent":["import type { SfDecodeOptions } from './SfDecodeOptions.js';\nimport type { SfItem } from './SfItem.js';\nimport { parseError } from './parse/parseError.js';\nimport { parseItem } from './parse/parseItem.js';\nimport { ITEM } from './utils/ITEM.js';\n\n// 4.2.  Parsing Structured Fields\n//\n// 1.  Convert input_bytes into an ASCII string input_string; if\n//     conversion fails, fail parsing.\n//\n// 2.  Discard any leading SP characters from input_string.\n//\n// 3.  If field_type is \"list\", let output be the result of running\n//     Parsing a List (Section 4.2.1) with input_string.\n//\n// 4.  If field_type is \"dictionary\", let output be the result of\n//     running Parsing a Dictionary (Section 4.2.2) with input_string.\n//\n// 5.  If field_type is \"item\", let output be the result of running\n//     Parsing an Item (Section 4.2.3) with input_string.\n//\n// 6.  Discard any leading SP characters from input_string.\n//\n// 7.  If input_string is not empty, fail parsing.\n//\n// 8.  Otherwise, return output.\n/**\n * Decode a structured field string into a structured field item\n *\n * @param input - The structured field string to decode\n * @returns The structured field item\n *\n * @group Structured Field\n *\n * @beta\n */\nexport function decodeSfItem(input: string, options?: SfDecodeOptions): SfItem {\n\ttry {\n\t\tconst { src, value } = parseItem(input.trim(), options);\n\t\tif (src !== '') {\n\t\t\tthrow parseError(src, ITEM);\n\t\t}\n\n\t\treturn value;\n\t}\n\tcatch (cause) {\n\t\tthrow parseError(input, ITEM, cause);\n\t}\n}\n"]}