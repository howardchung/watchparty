{"version":3,"file":"parseBareItem.js","sourceRoot":"","sources":["../../../../src/structuredfield/parse/parseBareItem.ts"],"names":[],"mappings":";;AAwCA,sCAqBC;AA3DD,wDAAkD;AAElD,uDAAiD;AACjD,iEAA2D;AAC3D,iDAA2C;AAC3C,mDAA6C;AAC7C,yEAAmE;AACnE,qDAA+C;AAC/C,mDAA6C;AAE7C,gCAAgC;AAChC,EAAE;AACF,6DAA6D;AAC7D,uDAAuD;AACvD,EAAE;AACF,kEAAkE;AAClE,iEAAiE;AACjE,yCAAyC;AACzC,EAAE;AACF,qEAAqE;AACrE,8DAA8D;AAC9D,oBAAoB;AACpB,EAAE;AACF,uEAAuE;AACvE,8DAA8D;AAC9D,oBAAoB;AACpB,EAAE;AACF,uEAAuE;AACvE,sEAAsE;AACtE,EAAE;AACF,wEAAwE;AACxE,iEAAiE;AACjE,oBAAoB;AACpB,EAAE;AACF,uEAAuE;AACvE,mEAAmE;AACnE,EAAE;AACF,8DAA8D;AAC9D,SAAgB,aAAa,CAAC,GAAW,EAAE,OAAyB;IACnE,MAAM,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACrB,IAAI,KAAK,KAAK,GAAG,EAAE,CAAC;QACnB,OAAO,IAAA,4BAAW,EAAC,GAAG,CAAC,CAAC;IACzB,CAAC;IACD,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;QAC3B,OAAO,IAAA,gDAAqB,EAAC,GAAG,CAAC,CAAC;IACnC,CAAC;IACD,IAAI,KAAK,KAAK,GAAG,EAAE,CAAC;QACnB,OAAO,IAAA,8BAAY,EAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IACD,IAAI,KAAK,KAAK,GAAG,EAAE,CAAC;QACnB,OAAO,IAAA,wCAAiB,EAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IACD,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;QAC9B,OAAO,IAAA,0BAAU,EAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACjC,CAAC;IACD,IAAI,KAAK,KAAK,GAAG,EAAE,CAAC;QACnB,OAAO,IAAA,wBAAS,EAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IACD,MAAM,IAAA,0BAAU,EAAC,GAAG,EAAE,wBAAS,CAAC,CAAC;AAClC,CAAC","sourcesContent":["import type { SfBareItem } from '../SfBareItem.js';\nimport type { SfDecodeOptions } from '../SfDecodeOptions.js';\nimport { BARE_ITEM } from '../utils/BARE_ITEM.js';\nimport type { ParsedValue } from './ParsedValue.js';\nimport { parseBoolean } from './parseBoolean.js';\nimport { parseByteSequence } from './parseByteSequence.js';\nimport { parseDate } from './parseDate.js';\nimport { parseError } from './parseError.js';\nimport { parseIntegerOrDecimal } from './parseIntegerOrDecimal.js';\nimport { parseString } from './parseString.js';\nimport { parseToken } from './parseToken.js';\n\n// 4.2.3.1.  Parsing a Bare Item\n//\n// Given an ASCII string as input_string, return a bare Item.\n// input_string is modified to remove the parsed value.\n//\n// 1.  If the first character of input_string is a \"-\" or a DIGIT,\n//     return the result of running Parsing an Integer or Decimal\n//     (Section 4.2.4) with input_string.\n//\n// 2.  If the first character of input_string is a DQUOTE, return the\n//     result of running Parsing a String (Section 4.2.5) with\n//     input_string.\n//\n// 3.  If the first character of input_string is \":\", return the result\n//     of running Parsing a Byte Sequence (Section 4.2.7) with\n//     input_string.\n//\n// 4.  If the first character of input_string is \"?\", return the result\n//     of running Parsing a Boolean (Section 4.2.8) with input_string.\n//\n// 5.  If the first character of input_string is an ALPHA or \"*\", return\n//     the result of running Parsing a Token (Section 4.2.6) with\n//     input_string.\n//\n// 6.  If the first character of input_string is \"@\", return the result\n//     of running Parsing a Date (Section 4.2.9) with input_string.\n//\n// 7.  Otherwise, the item type is unrecognized; fail parsing.\nexport function parseBareItem(src: string, options?: SfDecodeOptions): ParsedValue<SfBareItem> {\n\tconst first = src[0];\n\tif (first === `\"`) {\n\t\treturn parseString(src);\n\t}\n\tif (/^[-0-9]/.test(first)) {\n\t\treturn parseIntegerOrDecimal(src);\n\t}\n\tif (first === `?`) {\n\t\treturn parseBoolean(src);\n\t}\n\tif (first === `:`) {\n\t\treturn parseByteSequence(src);\n\t}\n\tif (/^[a-zA-Z*]/.test(first)) {\n\t\treturn parseToken(src, options);\n\t}\n\tif (first === `@`) {\n\t\treturn parseDate(src);\n\t}\n\tthrow parseError(src, BARE_ITEM);\n}\n"]}