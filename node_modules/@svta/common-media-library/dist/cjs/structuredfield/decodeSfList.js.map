{"version":3,"file":"decodeSfList.js","sourceRoot":"","sources":["../../../src/structuredfield/decodeSfList.ts"],"names":[],"mappings":";;AAgBA,oCAWC;AAzBD,yDAAmD;AACnD,uDAAiD;AACjD,6CAAuC;AAEvC;;;;;;;;;GASG;AACH,SAAgB,YAAY,CAAC,KAAa,EAAE,OAAyB;IACpE,IAAI,CAAC;QACJ,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,IAAA,wBAAS,EAAC,KAAK,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;QACxD,IAAI,GAAG,KAAK,EAAE,EAAE,CAAC;YAChB,MAAM,IAAA,0BAAU,EAAC,GAAG,EAAE,cAAI,CAAC,CAAC;QAC7B,CAAC;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IACD,OAAO,KAAK,EAAE,CAAC;QACd,MAAM,IAAA,0BAAU,EAAC,KAAK,EAAE,cAAI,EAAE,KAAK,CAAC,CAAC;IACtC,CAAC;AACF,CAAC","sourcesContent":["import type { SfDecodeOptions } from './SfDecodeOptions.js';\nimport type { SfMember } from './SfMember.js';\nimport { parseError } from './parse/parseError.js';\nimport { parseList } from './parse/parseList.js';\nimport { LIST } from './utils/LIST.js';\n\n/**\n * Decode a structured field string into a structured field list\n *\n * @param input - The structured field string to decode\n * @returns The structured field list\n *\n * @group Structured Field\n *\n * @beta\n */\nexport function decodeSfList(input: string, options?: SfDecodeOptions): SfMember[] {\n\ttry {\n\t\tconst { src, value } = parseList(input.trim(), options);\n\t\tif (src !== '') {\n\t\t\tthrow parseError(src, LIST);\n\t\t}\n\t\treturn value;\n\t}\n\tcatch (cause) {\n\t\tthrow parseError(input, LIST, cause);\n\t}\n}\n"]}