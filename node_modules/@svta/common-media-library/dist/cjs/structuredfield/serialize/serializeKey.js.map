{"version":3,"file":"serializeKey.js","sourceRoot":"","sources":["../../../../src/structuredfield/serialize/serializeKey.ts"],"names":[],"mappings":";;AAsBA,oCAKC;AA3BD,4CAAsC;AACtC,2DAAqD;AAErD,8BAA8B;AAC9B,EAAE;AACF,uEAAuE;AACvE,sBAAsB;AACtB,EAAE;AACF,gEAAgE;AAChE,4CAA4C;AAC5C,EAAE;AACF,wEAAwE;AACxE,sCAAsC;AACtC,EAAE;AACF,sEAAsE;AACtE,qBAAqB;AACrB,EAAE;AACF,qCAAqC;AACrC,EAAE;AACF,kCAAkC;AAClC,EAAE;AACF,qBAAqB;AACrB,SAAgB,YAAY,CAAC,KAAa;IACzC,IAAI,wBAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE,CAAC;QACpD,MAAM,IAAA,kCAAc,EAAC,KAAK,EAAE,YAAG,CAAC,CAAC;IAClC,CAAC;IACD,OAAO,KAAK,CAAC;AACd,CAAC","sourcesContent":["import { KEY } from '../utils/KEY.js';\nimport { serializeError } from './serializeError.js';\n\n// 4.1.1.3.  Serializing a Key\n//\n// Given a key as input_key, return an ASCII string suitable for use in\n// a HTTP field value.\n//\n// 1.  Convert input_key into a sequence of ASCII characters; if\n//     conversion fails, fail serialization.\n//\n// 2.  If input_key contains characters not in lcalpha, DIGIT, \"_\", \"-\",\n//     \".\", or \"*\" fail serialization.\n//\n// 3.  If the first character of input_key is not lcalpha or \"*\", fail\n//     serialization.\n//\n// 4.  Let output be an empty string.\n//\n// 5.  Append input_key to output.\n//\n// 6.  Return output.\nexport function serializeKey(value: string): string {\n\tif (/^[a-z*][a-z0-9\\-_.*]*$/.test(value) === false) {\n\t\tthrow serializeError(value, KEY);\n\t}\n\treturn value;\n}\n"]}