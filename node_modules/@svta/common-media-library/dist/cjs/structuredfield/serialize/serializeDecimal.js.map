{"version":3,"file":"serializeDecimal.js","sourceRoot":"","sources":["../../../../src/structuredfield/serialize/serializeDecimal.ts"],"names":[],"mappings":";;AAsCA,4CAOC;AA7CD,+DAAyD;AACzD,oDAA8C;AAC9C,2DAAqD;AAErD,gCAAgC;AAChC,EAAE;AACF,kEAAkE;AAClE,0CAA0C;AAC1C,EAAE;AACF,qEAAqE;AACrE,EAAE;AACF,sEAAsE;AACtE,qEAAqE;AACrE,qEAAqE;AACrE,mCAAmC;AACnC,EAAE;AACF,wEAAwE;AACxE,gEAAgE;AAChE,EAAE;AACF,sCAAsC;AACtC,EAAE;AACF,sEAAsE;AACtE,kBAAkB;AAClB,EAAE;AACF,uEAAuE;AACvE,oEAAoE;AACpE,YAAY;AACZ,EAAE;AACF,6BAA6B;AAC7B,EAAE;AACF,sEAAsE;AACtE,eAAe;AACf,EAAE;AACF,mEAAmE;AACnE,uEAAuE;AACvE,0BAA0B;AAC1B,EAAE;AACF,sBAAsB;AACtB,SAAgB,gBAAgB,CAAC,KAAa;IAC7C,MAAM,YAAY,GAAG,IAAA,4BAAW,EAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,4BAA4B;IACxE,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,EAAE,EAAE,CAAC;QAC/D,MAAM,IAAA,kCAAc,EAAC,KAAK,EAAE,oBAAO,CAAC,CAAC;IACtC,CAAC;IACD,MAAM,WAAW,GAAG,YAAY,CAAC,QAAQ,EAAE,CAAC;IAC5C,OAAO,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,WAAW,IAAI,CAAC;AACrE,CAAC","sourcesContent":["import { roundToEven } from '../../utils/roundToEven.js';\nimport { DECIMAL } from '../utils/DECIMAL.js';\nimport { serializeError } from './serializeError.js';\n\n// 4.1.5.  Serializing a Decimal\n//\n// Given a decimal number as input_decimal, return an ASCII string\n// suitable for use in a HTTP field value.\n//\n// 1.   If input_decimal is not a decimal number, fail serialization.\n//\n// 2.   If input_decimal has more than three significant digits to the\n//      right of the decimal point, round it to three decimal places,\n//      rounding the final digit to the nearest value, or to the even\n//      value if it is equidistant.\n//\n// 3.   If input_decimal has more than 12 significant digits to the left\n//      of the decimal point after rounding, fail serialization.\n//\n// 4.   Let output be an empty string.\n//\n// 5.   If input_decimal is less than (but not equal to) 0, append \"-\"\n//      to output.\n//\n// 6.   Append input_decimal's integer component represented in base 10\n//      (using only decimal digits) to output; if it is zero, append\n//      \"0\".\n//\n// 7.   Append \".\" to output.\n//\n// 8.   If input_decimal's fractional component is zero, append \"0\" to\n//      output.\n//\n// 9.   Otherwise, append the significant digits of input_decimal's\n//      fractional component represented in base 10 (using only decimal\n//      digits) to output.\n//\n// 10.  Return output.\nexport function serializeDecimal(value: number): string {\n\tconst roundedValue = roundToEven(value, 3); // round to 3 decimal places\n\tif (Math.floor(Math.abs(roundedValue)).toString().length > 12) {\n\t\tthrow serializeError(value, DECIMAL);\n\t}\n\tconst stringValue = roundedValue.toString();\n\treturn stringValue.includes('.') ? stringValue : `${stringValue}.0`;\n}\n"]}