{"version":3,"file":"serializeInteger.js","sourceRoot":"","sources":["../../../../src/structuredfield/serialize/serializeInteger.ts"],"names":[],"mappings":";;AAsBA,4CAMC;AA5BD,oDAA8C;AAC9C,8DAAwD;AACxD,2DAAqD;AAErD,iCAAiC;AACjC,EAAE;AACF,qEAAqE;AACrE,iCAAiC;AACjC,EAAE;AACF,yDAAyD;AACzD,kEAAkE;AAClE,qBAAqB;AACrB,EAAE;AACF,qCAAqC;AACrC,EAAE;AACF,wEAAwE;AACxE,cAAc;AACd,EAAE;AACF,wEAAwE;AACxE,qCAAqC;AACrC,EAAE;AACF,qBAAqB;AACrB,SAAgB,gBAAgB,CAAC,KAAa;IAC7C,IAAI,IAAA,8BAAY,EAAC,KAAK,CAAC,EAAE,CAAC;QACzB,MAAM,IAAA,kCAAc,EAAC,KAAK,EAAE,oBAAO,CAAC,CAAC;IACtC,CAAC;IAED,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;AACzB,CAAC","sourcesContent":["import { INTEGER } from '../utils/INTEGER.js';\nimport { isInvalidInt } from '../utils/isInvalidInt.js';\nimport { serializeError } from './serializeError.js';\n\n// 4.1.4.  Serializing an Integer\n//\n// Given an Integer as input_integer, return an ASCII string suitable\n// for use in a HTTP field value.\n//\n// 1.  If input_integer is not an integer in the range of\n//     -999,999,999,999,999 to 999,999,999,999,999 inclusive, fail\n//     serialization.\n//\n// 2.  Let output be an empty string.\n//\n// 3.  If input_integer is less than (but not equal to) 0, append \"-\" to\n//     output.\n//\n// 4.  Append input_integer's numeric value represented in base 10 using\n//     only decimal digits to output.\n//\n// 5.  Return output.\nexport function serializeInteger(value: number): string {\n\tif (isInvalidInt(value)) {\n\t\tthrow serializeError(value, INTEGER);\n\t}\n\n\treturn value.toString();\n}\n"]}