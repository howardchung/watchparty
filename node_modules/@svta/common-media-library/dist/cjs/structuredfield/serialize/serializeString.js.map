{"version":3,"file":"serializeString.js","sourceRoot":"","sources":["../../../../src/structuredfield/serialize/serializeString.ts"],"names":[],"mappings":";;AA4BA,0CAMC;AAlCD,kDAA4C;AAC5C,8DAAwD;AACxD,2DAAqD;AAErD,+BAA+B;AAC/B,EAAE;AACF,sEAAsE;AACtE,6BAA6B;AAC7B,EAAE;AACF,mEAAmE;AACnE,4CAA4C;AAC5C,EAAE;AACF,uEAAuE;AACvE,sDAAsD;AACtD,EAAE;AACF,uCAAuC;AACvC,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,oCAAoC;AACpC,EAAE;AACF,oCAAoC;AACpC,EAAE;AACF,iCAAiC;AACjC,EAAE;AACF,+BAA+B;AAC/B,EAAE;AACF,qBAAqB;AACrB,SAAgB,eAAe,CAAC,KAAa;IAC5C,IAAI,8BAAY,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;QAC9B,MAAM,IAAA,kCAAc,EAAC,KAAK,EAAE,kBAAM,CAAC,CAAC;IACrC,CAAC;IAED,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC;AACjE,CAAC","sourcesContent":["import { STRING } from '../utils/STRING.js';\nimport { STRING_REGEX } from '../utils/STRING_REGEX.js';\nimport { serializeError } from './serializeError.js';\n\n// 4.1.6.  Serializing a String\n//\n// Given a String as input_string, return an ASCII string suitable for\n// use in a HTTP field value.\n//\n// 1.  Convert input_string into a sequence of ASCII characters; if\n//     conversion fails, fail serialization.\n//\n// 2.  If input_string contains characters in the range %x00-1f or %x7f\n//     (i.e., not in VCHAR or SP), fail serialization.\n//\n// 3.  Let output be the string DQUOTE.\n//\n// 4.  For each character char in input_string:\n//\n//     1.  If char is \"\\\" or DQUOTE:\n//\n//         1.  Append \"\\\" to output.\n//\n//     2.  Append char to output.\n//\n// 5.  Append DQUOTE to output.\n//\n// 6.  Return output.\nexport function serializeString(value: string) {\n\tif (STRING_REGEX.test(value)) {\n\t\tthrow serializeError(value, STRING);\n\t}\n\n\treturn `\"${value.replace(/\\\\/g, `\\\\\\\\`).replace(/\"/g, `\\\\\"`)}\"`;\n}\n"]}