{"version":3,"file":"toCmcdHeaders.js","sourceRoot":"","sources":["../../../src/cmcd/toCmcdHeaders.ts"],"names":[],"mappings":";;AAmBA,sCAuBC;AAxCD,6DAAuD;AACvD,yDAAmD;AAEnD,mDAA6C;AAE7C;;;;;;;;;;;GAWG;AACH,SAAgB,aAAa,CAAC,IAAU,EAAE,UAA6B,EAAE;IACxE,MAAM,MAAM,GAAG,EAAqC,CAAC;IAErD,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,OAAO,MAAM,CAAC;IACf,CAAC;IAED,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACrC,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,gCAAa,CAAC;SAC7C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,eAAe,KAAI,EAAE,CAAC,CAAC,CAAC;IACzD,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;;QAC5C,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,KAAiC,CAAC;QACvD,MAAM,KAAK,GAAG,CAAA,MAAA,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,0CAAG,CAAC,CAAoB,KAAI,oCAAe,CAAC,OAAO,CAAC;QACjH,MAAA,GAAG,CAAC,KAAK,qCAAT,GAAG,CAAC,KAAK,IAAM,EAAE,EAAC;QAClB,GAAG,CAAC,KAAK,CAAC,CAAC,GAAU,CAAC,GAAG,KAAY,CAAC;QACtC,OAAO,GAAG,CAAC;IACZ,CAAC,EAAE,EAAmC,CAAC,CAAC;IAExC,OAAO,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;SAC3B,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,EAAE;QAC/B,GAAG,CAAC,KAAwB,CAAC,GAAG,IAAA,0BAAU,EAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC3D,OAAO,GAAG,CAAC;IACZ,CAAC,EAAE,MAAM,CAAC,CAAC;AACb,CAAC","sourcesContent":["import type { Cmcd } from './Cmcd.js';\nimport type { CmcdEncodeOptions } from './CmcdEncodeOptions.js';\nimport { CmcdHeaderField } from './CmcdHeaderField.js';\nimport { CmcdHeaderMap } from './CmcdHeaderMap.js';\nimport type { CmcdKey } from './CmcdKey.js';\nimport { encodeCmcd } from './encodeCmcd.js';\n\n/**\n * Convert a CMCD data object to request headers\n *\n * @param cmcd - The CMCD data object to convert.\n * @param options - Options for encoding the CMCD object.\n *\n * @returns The CMCD header shards.\n *\n * @group CMCD\n *\n * @beta\n */\nexport function toCmcdHeaders(cmcd: Cmcd, options: CmcdEncodeOptions = {}): Record<CmcdHeaderField, string> {\n\tconst result = {} as Record<CmcdHeaderField, string>;\n\n\tif (!cmcd) {\n\t\treturn result;\n\t}\n\n\tconst entries = Object.entries(cmcd);\n\tconst headerMap = Object.entries(CmcdHeaderMap)\n\t\t.concat(Object.entries(options?.customHeaderMap || {}));\n\tconst shards = entries.reduce((acc, entry) => {\n\t\tconst [key, value] = entry as [CmcdKey, Cmcd[CmcdKey]];\n\t\tconst field = headerMap.find(entry => entry[1].includes(key))?.[0] as CmcdHeaderField || CmcdHeaderField.REQUEST;\n\t\tacc[field] ??= {};\n\t\tacc[field][key as any] = value as any;\n\t\treturn acc;\n\t}, {} as Record<CmcdHeaderField, Cmcd>);\n\n\treturn Object.entries(shards)\n\t\t.reduce((acc, [field, value]) => {\n\t\t\tacc[field as CmcdHeaderField] = encodeCmcd(value, options);\n\t\t\treturn acc;\n\t\t}, result);\n}\n"]}