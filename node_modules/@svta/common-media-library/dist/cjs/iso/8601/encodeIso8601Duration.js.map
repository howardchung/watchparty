{"version":3,"file":"encodeIso8601Duration.js","sourceRoot":"","sources":["../../../../src/iso/8601/encodeIso8601Duration.ts"],"names":[],"mappings":";;AAYA,sDAeC;AA3BD;;;;;;;;;;;GAWG;AACH,SAAgB,qBAAqB,CAAC,QAAgB;IACrD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;QACzB,OAAO,IAAI,CAAC;IACb,CAAC;IAED,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC;IAC1C,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IACnD,MAAM,OAAO,GAAG,QAAQ,GAAG,EAAE,CAAC;IAC9B,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;QACf,OAAO,KAAK,KAAK,IAAI,OAAO,IAAI,OAAO,GAAG,CAAC;IAC5C,CAAC;SACI,IAAI,OAAO,GAAG,CAAC,EAAE,CAAC;QACtB,OAAO,KAAK,OAAO,IAAI,OAAO,GAAG,CAAC;IACnC,CAAC;IACD,OAAO,KAAK,OAAO,GAAG,CAAC;AACxB,CAAC","sourcesContent":["/**\n * Encode a duration in seconds to an ISO 8601 duration string.\n *\n * @param duration - Duration in seconds.\n * @returns ISO 8601 duration string.\n *\n * @group ISO 8601\n * @beta\n *\n * @example\n * {@includeCode ../../../test/iso/8601/encodeIso8601Duration.test.ts#example}\n */\nexport function encodeIso8601Duration(duration: number): string {\n\tif (!isFinite(duration)) {\n\t\treturn 'PT';\n\t}\n\n\tconst hours = Math.floor(duration / 3600);\n\tconst minutes = Math.floor((duration % 3600) / 60);\n\tconst seconds = duration % 60;\n\tif (hours > 0) {\n\t\treturn `PT${hours}H${minutes}M${seconds}S`;\n\t}\n\telse if (minutes > 0) {\n\t\treturn `PT${minutes}M${seconds}S`;\n\t}\n\treturn `PT${seconds}S`;\n}\n"]}