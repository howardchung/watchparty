{"version":3,"file":"sidx.js","sourceRoot":"","sources":["../../../../../src/iso/bmff/parsers/sidx.ts"],"names":[],"mappings":";;AAgDA,oBAqCC;AAhDD;;;;;;;;;;GAUG;AACH,SAAgB,IAAI,CAAC,IAAa;IACjC,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;IAC1B,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAC9C,MAAM,EAAE,GAAG,OAAO,KAAK,CAAC,CAAC;IACzB,MAAM,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAExB,MAAM,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAChC,MAAM,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC9B,MAAM,wBAAwB,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IAChD,MAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IACnC,MAAM,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC7B,MAAM,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IACnC,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAY,cAAc,EAAE,GAAG,EAAE;QACnE,MAAM,KAAK,GAAG,EAAS,CAAC;QAExB,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC9B,KAAK,CAAC,kBAAkB,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACvC,KAAK,CAAC,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACxB,KAAK,CAAC,aAAa,GAAG,CAAC,KAAK,CAAC,SAAS,IAAI,EAAE,CAAC,GAAG,UAAU,CAAC;QAC3D,KAAK,CAAC,cAAc,GAAG,KAAK,CAAC,SAAS,GAAG,UAAU,CAAC;QACpD,KAAK,CAAC,aAAa,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,UAAU,CAAC;QACrD,KAAK,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,UAAU,CAAC;QAC/C,KAAK,CAAC,YAAY,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC;QAE9C,OAAO,KAAK,CAAC;IACd,CAAC,CAAC,CAAC;IAEH,OAAO;QACN,OAAO;QACP,KAAK;QACL,WAAW;QACX,SAAS;QACT,wBAAwB;QACxB,WAAW;QACX,QAAQ;QACR,UAAU;KACV,CAAC;AACH,CAAC;AAAA,CAAC","sourcesContent":["import type { FullBox } from '../FullBox.js';\nimport type { IsoView } from '../IsoView.js';\n\n/**\n * Segment index reference\n *\n * @group ISOBMFF\n *\n * @beta\n */\nexport type Reference = {\n\treference: number,\n\tsubsegmentDuration: number,\n\tsap: number,\n\treferenceType: number,\n\treferencedSize: number,\n\tstartsWithSap: number,\n\tsapType: number,\n\tsapDeltaTime: number,\n};\n\n/**\n * ISO/IEC 14496-12:2012 - 8.16.3 Segment Index Box\n *\n * @group ISOBMFF\n *\n * @beta\n */\nexport type SegmentIndexBox = FullBox & {\n\treferenceId: number,\n\ttimescale: number,\n\tearliestPresentationTime: number,\n\tfirstOffset: number,\n\treserved: number,\n\treferences: Reference[],\n};\n\n/**\n * Parse a SegmentIndexBox from an IsoView\n *\n * @param view - The IsoView to read data from\n *\n * @returns A parsed SegmentIndexBox\n *\n * @group ISOBMFF\n *\n * @beta\n */\nexport function sidx(view: IsoView): SegmentIndexBox {\n\tconst { readUint } = view;\n\tconst { version, flags } = view.readFullBox();\n\tconst v1 = version === 1;\n\tconst size = v1 ? 8 : 4;\n\n\tconst referenceId = readUint(4);\n\tconst timescale = readUint(4);\n\tconst earliestPresentationTime = readUint(size);\n\tconst firstOffset = readUint(size);\n\tconst reserved = readUint(2);\n\tconst referenceCount = readUint(2);\n\tconst references = view.readEntries<Reference>(referenceCount, () => {\n\t\tconst entry = {} as any;\n\n\t\tentry.reference = readUint(4);\n\t\tentry.subsegmentDuration = readUint(4);\n\t\tentry.sap = readUint(4);\n\t\tentry.referenceType = (entry.reference >> 31) & 0x00000001;\n\t\tentry.referencedSize = entry.reference & 0x7FFFFFFF;\n\t\tentry.startsWithSap = (entry.sap >> 31) & 0x00000001;\n\t\tentry.sapType = (entry.sap >> 28) & 0x00000007;\n\t\tentry.sapDeltaTime = (entry.sap & 0x0FFFFFFF);\n\n\t\treturn entry;\n\t});\n\n\treturn {\n\t\tversion,\n\t\tflags,\n\t\treferenceId,\n\t\ttimescale,\n\t\tearliestPresentationTime,\n\t\tfirstOffset,\n\t\treserved,\n\t\treferences,\n\t};\n};\n"]}