{"version":3,"file":"tfra.js","sourceRoot":"","sources":["../../../../../src/iso/bmff/parsers/tfra.ts"],"names":[],"mappings":";;AA8CA,oBA8BC;AAzCD;;;;;;;;;;GAUG;AACH,SAAgB,IAAI,CAAC,IAAa;IACjC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAC9C,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACjC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAElC,MAAM,mBAAmB,GAAG,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;IACzD,MAAM,mBAAmB,GAAG,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;IACzD,MAAM,qBAAqB,GAAG,CAAC,QAAQ,GAAG,UAAU,CAAC,CAAC;IAEtD,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAEvC,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAiC,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC;QACtF,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5C,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClD,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAClD,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAClD,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,qBAAqB,GAAG,CAAC,CAAC;KACtD,CAAC,CAAC,CAAC;IAEJ,OAAO;QACN,OAAO;QACP,KAAK;QACL,OAAO;QACP,QAAQ;QACR,mBAAmB;QACnB,mBAAmB;QACnB,qBAAqB;QACrB,aAAa;QACb,OAAO;KACP,CAAC;AACH,CAAC;AAAA,CAAC","sourcesContent":["import type { FullBox } from '../FullBox.js';\nimport type { IsoView } from '../IsoView.js';\n\n/**\n * Track fragment random access entry\n *\n * @group ISOBMFF\n *\n * @beta\n */\nexport type TrackFragmentRandomAccessEntry = {\n\ttime: number;\n\tmoofOffset: number;\n\ttrafNumber: number;\n\ttrunNumber: number;\n\tsampleNumber: number;\n};\n\n/**\n * ISO/IEC 14496-12:2012 - 8.8.10 Track Fragment Random Access Box\n *\n * @group ISOBMFF\n *\n * @beta\n */\nexport type TrackFragmentRandomAccessBox = FullBox & {\n\ttrackId: number;\n\treserved: number;\n\tnumberOfEntry: number;\n\tlengthSizeOfTrafNum: number;\n\tlengthSizeOfTrunNum: number;\n\tlengthSizeOfSampleNum: number;\n\tentries: TrackFragmentRandomAccessEntry[];\n};\n\n/**\n * Parse a TrackFragmentRandomAccessBox from an IsoView\n *\n * @param view - The IsoView to read data from\n *\n * @returns A parsed TrackFragmentRandomAccessBox\n *\n * @group ISOBMFF\n *\n * @beta\n */\nexport function tfra(view: IsoView): TrackFragmentRandomAccessBox {\n\tconst { version, flags } = view.readFullBox();\n\tconst trackId = view.readUint(4);\n\tconst reserved = view.readUint(4);\n\n\tconst lengthSizeOfTrafNum = (reserved & 0x00000030) >> 4;\n\tconst lengthSizeOfTrunNum = (reserved & 0x0000000C) >> 2;\n\tconst lengthSizeOfSampleNum = (reserved & 0x00000003);\n\n\tconst numberOfEntry = view.readUint(4);\n\n\tconst entries = view.readEntries<TrackFragmentRandomAccessEntry>(numberOfEntry, () => ({\n\t\ttime: view.readUint((version === 1) ? 8 : 4),\n\t\tmoofOffset: view.readUint((version === 1) ? 8 : 4),\n\t\ttrafNumber: view.readUint(lengthSizeOfTrafNum + 1),\n\t\ttrunNumber: view.readUint(lengthSizeOfTrunNum + 1),\n\t\tsampleNumber: view.readUint(lengthSizeOfSampleNum + 1),\n\t}));\n\n\treturn {\n\t\tversion,\n\t\tflags,\n\t\ttrackId,\n\t\treserved,\n\t\tlengthSizeOfTrafNum,\n\t\tlengthSizeOfTrunNum,\n\t\tlengthSizeOfSampleNum,\n\t\tnumberOfEntry,\n\t\tentries,\n\t};\n};\n"]}