{"version":3,"file":"vmhd.js","sourceRoot":"","sources":["../../../../../src/iso/bmff/parsers/vmhd.ts"],"names":[],"mappings":";;AA2BA,oBAMC;AAjCD,+CAAyC;AAgBzC;;;;;;;;;;GAUG;AACH,SAAgB,IAAI,CAAC,IAAa;IACjC,OAAO;QACN,GAAG,IAAI,CAAC,WAAW,EAAE;QACrB,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC9B,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,cAAI,EAAE,CAAC,EAAE,CAAC,CAAC;KACnC,CAAC;AACH,CAAC;AAAA,CAAC","sourcesContent":["import { UINT } from '../fields/UINT.js';\nimport type { FullBox } from '../FullBox.js';\nimport type { IsoView } from '../IsoView.js';\n\n/**\n * ISO/IEC 14496-12:2012 - 8.4.5.2 Video Media Header Box\n *\n * @group ISOBMFF\n *\n * @beta\n */\nexport type VideoMediaHeaderBox = FullBox & {\n\tgraphicsmode: number,\n\topcolor: number[],\n};\n\n/**\n * Parse a VideoMediaHeaderBox from an IsoView\n *\n * @param view - The IsoView to read data from\n *\n * @returns A parsed VideoMediaHeaderBox\n *\n * @group ISOBMFF\n *\n * @beta\n */\nexport function vmhd(view: IsoView): VideoMediaHeaderBox {\n\treturn {\n\t\t...view.readFullBox(),\n\t\tgraphicsmode: view.readUint(2),\n\t\topcolor: view.readArray(UINT, 2, 3),\n\t};\n};\n"]}