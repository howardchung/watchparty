{"version":3,"file":"concatInitDataIdAndCertificate.js","sourceRoot":"","sources":["../../../src/drm/fairplay/concatInitDataIdAndCertificate.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAE/D;;;;;;;;;;;;;GAaG;AAEH,MAAM,UAAU,8BAA8B,CAAC,QAAqB,EAAE,EAAwB,EAAE,IAAgB;IAC/G,IAAI,OAAO,EAAE,KAAK,QAAQ,EAAE,CAAC;QAC5B,EAAE,GAAG,cAAc,CAAC,EAAE,CAAC,CAAC;IACzB,CAAC;IACD,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,GAAG,EAAE,CAAC,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;IAC9F,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC;IACtC,IAAI,MAAM,GAAG,CAAC,CAAC;IAEf,IAAI,UAAU,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAClE,MAAM,IAAI,QAAQ,CAAC,UAAU,CAAC;IAE9B,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAChD,MAAM,IAAI,CAAC,CAAC;IACZ,IAAI,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACnD,MAAM,IAAI,EAAE,CAAC,UAAU,CAAC;IAExB,QAAQ,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAClD,MAAM,IAAI,CAAC,CAAC;IACZ,IAAI,UAAU,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAE1D,OAAO,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;AAC/B,CAAC","sourcesContent":["import { stringToUint16 } from '../../utils/stringToUint16.js';\n\n/**\n * Concatenates InitData, ID, and Certificate for FairPlay DRM.\n *\n * @param initData - The initialization data (PSSH box)\n * @param id - The content ID (string or Uint16Array)\n * @param cert - The application certificate (Uint8Array)\n * @returns A Uint8Array containing the concatenated data\n *\n * @group DRM\n * @beta\n *\n * @example\n * {@includeCode ../../../test/drm/fairplay/concatInitDataIdAndCertificate.test.ts#example}\n */\n\nexport function concatInitDataIdAndCertificate(initData: Uint16Array, id: Uint16Array | string, cert: Uint8Array): Uint8Array {\n\tif (typeof id === 'string') {\n\t\tid = stringToUint16(id);\n\t}\n\tconst buffer = new ArrayBuffer(initData.byteLength + 4 + id.byteLength + 4 + cert.byteLength);\n\tconst dataView = new DataView(buffer);\n\tlet offset = 0;\n\n\tnew Uint8Array(buffer, offset, initData.byteLength).set(initData);\n\toffset += initData.byteLength;\n\n\tdataView.setUint32(offset, id.byteLength, true);\n\toffset += 4;\n\tnew Uint16Array(buffer, offset, id.length).set(id);\n\toffset += id.byteLength;\n\n\tdataView.setUint32(offset, cert.byteLength, true);\n\toffset += 4;\n\tnew Uint8Array(buffer, offset, cert.byteLength).set(cert);\n\n\treturn new Uint8Array(buffer);\n}\n"]}