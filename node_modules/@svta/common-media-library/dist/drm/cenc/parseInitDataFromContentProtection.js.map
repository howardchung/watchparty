{"version":3,"file":"parseInitDataFromContentProtection.js","sourceRoot":"","sources":["../../../src/drm/cenc/parseInitDataFromContentProtection.ts"],"names":[],"mappings":"AAEA;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,kCAAkC,CACjD,MAAyB,EACzB,MAAsD;IAEtD,IAAI,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,KAAI,MAAM,CAAC,IAAI,EAAE,CAAC;QACjC,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC7E,OAAO,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,MAAqB,CAAC;IAC9D,CAAC;IAED,OAAO,IAAI,CAAC;AACb,CAAC","sourcesContent":["import type { ContentProtection } from '../common/ContentProtection.js';\n\n/**\n * Parse a standard common encryption PSSH which contains a simple\n * base64-encoding of the init data\n *\n * @param cpData - The ContentProtection element that may contain PSSH data.\n * @param BASE64 - The BASE64 reference.\n * @returns init data as an ArrayBuffer, or null if not found.\n *\n * @group DRM\n * @beta\n *\n * @example\n * {@includeCode ../../../test/drm/cenc/parseInitDataFromContentProtection.test.ts#example}\n */\nexport function parseInitDataFromContentProtection(\n\tcpData: ContentProtection,\n\tBASE64: { decodeArray: (input: string) => Uint8Array },\n): ArrayBuffer | null {\n\tif (cpData?.pssh && cpData.pssh) {\n\t\tconst cleanedText = cpData.pssh.replace(/\\r?\\n|\\r/g, '').replace(/\\s+/g, '');\n\t\treturn BASE64.decodeArray(cleanedText).buffer as ArrayBuffer;\n\t}\n\n\treturn null;\n}\n"]}