{"version":3,"file":"getLicenseRequestFromMessage.js","sourceRoot":"","sources":["../../../src/drm/playready/getLicenseRequestFromMessage.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAC;AAC/C,OAAO,EAAE,mBAAmB,EAAE,MAAM,oCAAoC,CAAC;AACzE,OAAO,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAC;AAC3D,OAAO,EAAE,iBAAiB,EAAE,MAAM,gCAAgC,CAAC;AACnE,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAE,qBAAqB,EAAE,MAAM,oCAAoC,CAAC;AAE3E;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,4BAA4B,CAC3C,OAAoB,EACpB,WAAqB,MAAM;;IAG3B,uEAAuE;IACvE,yCAAyC;IACzC,IAAI,QAAQ,KAAK,MAAM,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,IAAG,CAAC,KAAK,CAAC,EAAE,CAAC;QAC1D,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,MAAM,GAAG,GAAG,mBAAmB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACnD,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC1B,MAAM,mBAAmB,GAAG,iBAAiB,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC;IAE7E,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC1B,6EAA6E;QAC7E,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,MAAM,aAAa,GAAG,iBAAiB,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3E,MAAM,cAAc,GAAG,MAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,UAAU,CAAC,CAAC,CAAC,0CAAE,SAAS,CAAC;IAE/D,IAAI,cAAc,EAAE,CAAC;QACpB,OAAO,YAAY,CAAC,cAAc,CAAC,CAAC,MAAqB,CAAC;IAC3D,CAAC;IAED,OAAO,OAAO,CAAC;AAChB,CAAC","sourcesContent":["import type { Encoding } from '../../utils/Encoding.js';\nimport { UTF_16 } from '../../utils/UTF_16.js';\nimport { arrayBufferToString } from '../../utils/arrayBufferToString.js';\nimport { base64decode } from '../../utils/base64decode.js';\nimport { getElementsByName } from '../../xml/getElementsByName.js';\nimport { parseXml } from '../../xml/parseXml.js';\nimport { CHALLENGE } from '../common/CHALLENGE.js';\nimport { PLAYREADY_KEY_MESSAGE } from '../common/PLAYREADY_KEY_MESSAGE.js';\n\n/**\n * Gets the PlayReady license request from the MediaKeyMessageEvent.\n *\n * @param message - An ArrayBuffer from the content decryption module.\n * @param encoding - The message encoding type. Default is UTF-16.\n * @returns The license request as an ArrayBuffer.\n *\n * @group DRM\n * @beta\n *\n * @example\n * {@includeCode ../../../test/drm/playready/getLicenseRequestFromMessage.test.ts#example}\n */\nexport function getLicenseRequestFromMessage(\n\tmessage: ArrayBuffer,\n\tencoding: Encoding = UTF_16,\n): ArrayBuffer {\n\n\t// If encoding is configured for UTF-16 and the number of bytes is odd,\n\t// assume an 'unwrapped' raw CDM message.\n\tif (encoding === UTF_16 && message?.byteLength % 2 === 1) {\n\t\treturn message;\n\t}\n\n\tconst msg = arrayBufferToString(message, encoding);\n\tconst xml = parseXml(msg);\n\tconst playReadyKeyMessage = getElementsByName(xml, PLAYREADY_KEY_MESSAGE)[0];\n\n\tif (!playReadyKeyMessage) {\n\t\t// The message from the CDM is not wrapped and contains the direct challenge.\n\t\treturn message;\n\t}\n\n\tconst challengeNode = getElementsByName(playReadyKeyMessage, CHALLENGE)[0];\n\tconst challengeValue = challengeNode?.childNodes[0]?.nodeValue;\n\n\tif (challengeValue) {\n\t\treturn base64decode(challengeValue).buffer as ArrayBuffer;\n\t}\n\n\treturn message;\n}\n"]}