{"version":3,"file":"getRequestHeadersFromMessage.js","sourceRoot":"","sources":["../../../src/drm/playready/getRequestHeadersFromMessage.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAC;AAE/C,OAAO,EAAE,mBAAmB,EAAE,MAAM,oCAAoC,CAAC;AACzE,OAAO,EAAE,iBAAiB,EAAE,MAAM,gCAAgC,CAAC;AACnE,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AACzD,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AACzD,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAE3D;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,4BAA4B,CAC3C,OAAoB,EACpB,WAAyC,MAAM;;IAE/C,MAAM,OAAO,GAA2B,EAAE,CAAC;IAE3C,+EAA+E;IAC/E,sCAAsC;IACtC,IAAI,QAAQ,KAAK,MAAM,IAAI,OAAO,IAAI,OAAO,CAAC,UAAU,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;QACpE,OAAO,CAAC,YAAY,CAAC,GAAG,aAAa,CAAC;QACtC,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,MAAM,GAAG,GAAG,mBAAmB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACnD,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC1B,MAAM,WAAW,GAAG,iBAAiB,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;IAEvE,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE,CAAC;QAClC,MAAM,IAAI,GAAG,MAAA,MAAA,iBAAiB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,0CAAE,UAAU,CAAC,CAAC,CAAC,0CAAE,SAAS,CAAC;QAC5E,MAAM,KAAK,GAAG,MAAA,MAAA,iBAAiB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,0CAAE,UAAU,CAAC,CAAC,CAAC,0CAAE,SAAS,CAAC;QAE9E,IAAI,IAAI,IAAI,KAAK,EAAE,CAAC;YACnB,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;QACvB,CAAC;IACF,CAAC;IACD,iFAAiF;IACjF,mFAAmF;IACnF,IAAI,OAAO,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE,CAAC;QACvC,OAAO,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;QAC3C,OAAO,OAAO,CAAC,SAAS,CAAC,CAAC;IAC3B,CAAC;IACD,8EAA8E;IAC9E,kCAAkC;IAClC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE,CAAC;QAC3C,OAAO,CAAC,YAAY,CAAC,GAAG,aAAa,CAAC;IACvC,CAAC;IAED,OAAO,OAAO,CAAC;AAChB,CAAC","sourcesContent":["import { UTF_16 } from '../../utils/UTF_16.js';\nimport type { UTF_8 } from '../../utils/UTF_8.js';\nimport { arrayBufferToString } from '../../utils/arrayBufferToString.js';\nimport { getElementsByName } from '../../xml/getElementsByName.js';\nimport { parseXml } from '../../xml/parseXml.js';\nimport { CONTENT_TYPE } from '../common/CONTENT_TYPE.js';\nimport { HTTP_HEADERS } from '../common/HTTP_HEADERS.js';\nimport { TEXT_XML_UTF8 } from '../common/TEXT_XML_UTF8.js';\n\n/**\n * Gets the PlayReady license request headers from the MediaKeyMessageEvent.\n *\n * @param message - An ArrayBuffer from the content decryption module.\n * @param encoding - The message encoding type. Default is UTF-16.\n * @returns Request headers.\n *\n * @group DRM\n * @beta\n *\n * @example\n * {@includeCode ../../../test/drm/playready/getRequestHeadersFromMessage.test.ts#example}\n */\nexport function getRequestHeadersFromMessage(\n\tmessage: ArrayBuffer,\n\tencoding: typeof UTF_8 | typeof UTF_16 = UTF_16,\n): Record<string, string> {\n\tconst headers: Record<string, string> = {};\n\n\t// If message format configured/defaulted to utf-16 AND number of bytes is odd,\n\t// assume 'unwrapped' raw CDM message.\n\tif (encoding === UTF_16 && message && message.byteLength % 2 === 1) {\n\t\theaders[CONTENT_TYPE] = TEXT_XML_UTF8;\n\t\treturn headers;\n\t}\n\n\tconst msg = arrayBufferToString(message, encoding);\n\tconst xml = parseXml(msg);\n\tconst httpHeaders = getElementsByName(xml, HTTP_HEADERS)[0].childNodes;\n\n\tfor (const header of httpHeaders) {\n\t\tconst name = getElementsByName(header, 'name')[0]?.childNodes[0]?.nodeValue;\n\t\tconst value = getElementsByName(header, 'value')[0]?.childNodes[0]?.nodeValue;\n\n\t\tif (name && value) {\n\t\t\theaders[name] = value;\n\t\t}\n\t}\n\t// Some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n\t// This does not adhere to the W3C spec and license servers may reject the request.\n\tif (headers.hasOwnProperty('Content')) {\n\t\theaders[CONTENT_TYPE] = headers['Content'];\n\t\tdelete headers['Content'];\n\t}\n\t// Set 'Content-Type' header by default if not provided in the the CDM message\n\t// or if the message is unwrapped.\n\tif (!headers.hasOwnProperty(CONTENT_TYPE)) {\n\t\theaders[CONTENT_TYPE] = TEXT_XML_UTF8;\n\t}\n\n\treturn headers;\n}\n"]}