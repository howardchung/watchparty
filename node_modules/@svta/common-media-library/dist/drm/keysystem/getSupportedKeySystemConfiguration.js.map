{"version":3,"file":"getSupportedKeySystemConfiguration.js","sourceRoot":"","sources":["../../../src/drm/keysystem/getSupportedKeySystemConfiguration.ts"],"names":[],"mappings":"AAGA,MAAM,eAAe,GAA6D,CAAC,OAAO,SAAS,KAAK,WAAW,IAAI,OAAQ,SAAiB,CAAC,eAAe,KAAK,UAAU,CAAC,CAAC,CAAC,CAAE,SAAiB,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC;AAElO;;;;;;;;;GASG;AACH,MAAM,UAAU,kCAAkC,CACjD,eAAuB,EACvB,OAAiC;IAEjC,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,eAAe,KAAK,WAAW,EAAE,CAAC;QAChF,OAAO,EAAE,cAAc,EAAE,EAAE,EAAE,cAAc,EAAE,EAAE,EAAE,CAAC;IACnD,CAAC;IAED,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;QAC9B,MAAM,MAAM,GAAG,MAAM,CAAC,iBAAiB,IAAI,EAAE,CAAC;QAC9C,MAAM,MAAM,GAAG,MAAM,CAAC,iBAAiB,IAAI,EAAE,CAAC;QAE9C,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,eAAe,CAAC,eAAe,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;QACnG,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,eAAe,CAAC,eAAe,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;QAEnG,MAAM,QAAQ,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;QAC3C,MAAM,QAAQ,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;QAE3C,IAAI,QAAQ,IAAI,QAAQ,EAAE,CAAC;YAC1B,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,CAAC;QAC3C,CAAC;IACF,CAAC;IAED,OAAO,EAAE,cAAc,EAAE,EAAE,EAAE,cAAc,EAAE,EAAE,EAAE,CAAC;AACnD,CAAC","sourcesContent":["import type { KeySystemConfiguration } from '../common/KeySystemConfiguration.js';\nimport type { MediaCapability } from '../common/MediaCapability.js';\n\nconst isTypeSupported: (keySystem: string, type: string) => boolean | undefined = (typeof MediaKeys !== 'undefined' && typeof (MediaKeys as any).isTypeSupported === 'function') ? (MediaKeys as any).isTypeSupported : undefined;\n\n/**\n * Filters and returns the supported key system configuration for a given system string.\n *\n * @param keySystemString - Key system string such as 'com.widevine.alpha'\n * @param configs - An array of key system configurations.\n * @returns The first supported configuration or null if none are supported.\n *\n * @group DRM\n * @beta\n */\nexport function getSupportedKeySystemConfiguration(\n\tkeySystemString: string,\n\tconfigs: KeySystemConfiguration[],\n): { supportedAudio: MediaCapability[]; supportedVideo: MediaCapability[] } {\n\tif (!configs || configs.length === 0 || typeof isTypeSupported === 'undefined') {\n\t\treturn { supportedAudio: [], supportedVideo: [] };\n\t}\n\n\tfor (const config of configs) {\n\t\tconst audios = config.audioCapabilities || [];\n\t\tconst videos = config.videoCapabilities || [];\n\n\t\tconst supportedAudio = audios.filter(audio => isTypeSupported(keySystemString, audio.contentType));\n\t\tconst supportedVideo = videos.filter(video => isTypeSupported(keySystemString, video.contentType));\n\n\t\tconst hasAudio = supportedAudio.length > 0;\n\t\tconst hasVideo = supportedVideo.length > 0;\n\n\t\tif (hasAudio || hasVideo) {\n\t\t\treturn { supportedAudio, supportedVideo };\n\t\t}\n\t}\n\n\treturn { supportedAudio: [], supportedVideo: [] };\n}\n"]}