{"version":3,"file":"filterBoxes.js","sourceRoot":"","sources":["../../../src/iso/bmff/filterBoxes.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAInD,SAAS,MAAM,CAAC,QAAuB,EAAE,SAAkB,EAAE,EAAa,EAAE,QAAe,EAAE;IAC5F,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE,CAAC;QAC5B,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC;YACb,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC;QAED,IAAI,SAAS,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YAC3C,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACzC,CAAC;IACF,CAAC;IAED,OAAO,KAAK,CAAC;AACd,CAAC;AAED;;;;;;;;;;GAUG;AACH,MAAM,UAAU,WAAW,CAAC,GAAY,EAAE,MAAqB,EAAE,EAAa;IAC7E,OAAO,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE,EAAE,GAAG,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;AAC5F,CAAC","sourcesContent":["import type { Box } from './Box.js';\nimport type { BoxFilter } from './BoxFilter.js';\nimport { createIsoView } from './createIsoView.js';\nimport type { IsoData } from './IsoData.js';\nimport type { IsoViewConfig } from './IsoViewConfig.js';\n\nfunction filter(iterator: Iterable<Box>, recursive: boolean, fn: BoxFilter, boxes: Box[] = []): Box[] {\n\tfor (const box of iterator) {\n\t\tif (fn(box)) {\n\t\t\tboxes.push(box);\n\t\t}\n\n\t\tif (recursive && Array.isArray(box.boxes)) {\n\t\t\tfilter(box.boxes, recursive, fn, boxes);\n\t\t}\n\t}\n\n\treturn boxes;\n}\n\n/**\n * Filters boxes based on the given filter function.\n *\n * @param raw - The raw boxes to filter.\n * @param config - The box parser configuration.\n * @param fn - The filter function.\n * @returns The filtered boxes.\n *\n * @group ISOBMFF\n * @beta\n */\nexport function filterBoxes(raw: IsoData, config: IsoViewConfig, fn: BoxFilter): Box[] {\n\treturn filter(createIsoView(raw, { ...config, recursive: false }), !!config.recursive, fn);\n}\n"]}