{"version":3,"file":"findBox.js","sourceRoot":"","sources":["../../../src/iso/bmff/findBox.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAInD,SAAS,IAAI,CAAC,QAAuB,EAAE,SAAkB,EAAE,EAAa;IACvE,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE,CAAC;QAC5B,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC;YACb,OAAO,GAAG,CAAC;QACZ,CAAC;QAED,IAAI,SAAS,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YAC3C,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;YAE9C,IAAI,MAAM,EAAE,CAAC;gBACZ,OAAO,MAAM,CAAC;YACf,CAAC;QACF,CAAC;IACF,CAAC;IAED,OAAO,IAAI,CAAC;AACb,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,OAAO,CAAC,GAAY,EAAE,MAAqB,EAAE,EAAa;IACzE,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,EAAE,GAAG,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;AAC1F,CAAC","sourcesContent":["import type { Box } from './Box.js';\nimport type { BoxFilter } from './BoxFilter.js';\nimport { createIsoView } from './createIsoView.js';\nimport type { IsoData } from './IsoData.js';\nimport type { IsoViewConfig } from './IsoViewConfig.js';\n\nfunction find(iterator: Iterable<Box>, recursive: boolean, fn: BoxFilter): Box | null {\n\tfor (const box of iterator) {\n\t\tif (fn(box)) {\n\t\t\treturn box;\n\t\t}\n\n\t\tif (recursive && Array.isArray(box.boxes)) {\n\t\t\tconst result = find(box.boxes, recursive, fn);\n\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n\n/**\n * Find a box from an IsoView that matches a filter function\n *\n * @param raw - The raw ISO data\n * @param config - The configuration for the IsoView\n * @param fn - The filter function\n *\n * @returns The first box that matches the filter function\n *\n * @group ISOBMFF\n *\n * @beta\n */\nexport function findBox(raw: IsoData, config: IsoViewConfig, fn: BoxFilter): Box | null {\n\treturn find(createIsoView(raw, { ...config, recursive: false }), !!config.recursive, fn);\n}\n"]}