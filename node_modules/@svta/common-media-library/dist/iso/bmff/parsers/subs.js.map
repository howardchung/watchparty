{"version":3,"file":"subs.js","sourceRoot":"","sources":["../../../../src/iso/bmff/parsers/subs.ts"],"names":[],"mappings":"AA0CA;;;;;;;;;;GAUG;AACH,MAAM,UAAU,IAAI,CAAC,IAAa;IACjC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAC9C,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACpC,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,GAAG,EAAE;QACjD,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACrC,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,GAAG,EAAE,CAAC,CAAC;YAC1D,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACrD,iBAAiB,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7B,uBAAuB,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;SACzC,CAAC,CAAC,CAAC;QAEJ,OAAO;YACN,WAAW;YACX,cAAc;YACd,UAAU;SACV,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,OAAO;QACN,OAAO;QACP,KAAK;QACL,UAAU;QACV,OAAO;KACP,CAAC;AACH,CAAC;AAAA,CAAC","sourcesContent":["import type { FullBox } from '../FullBox.js';\nimport type { IsoView } from '../IsoView.js';\n\n/**\n * Sub sample\n *\n * @group ISOBMFF\n *\n * @beta\n */\nexport type SubSample = {\n\tsubsampleSize: number;\n\tsubsamplePriority: number;\n\tdiscardable: number;\n\tcodecSpecificParameters: number;\n};\n\n/**\n * Sub sample entry\n *\n * @group ISOBMFF\n *\n * @beta\n */\nexport type SubSampleEntry = {\n\tsampleDelta: number;\n\tsubsampleCount: number;\n\tsubsamples: SubSample[];\n};\n\n/**\n * ISO/IEC 14496-12:2015 - 8.7.7 Sub-Sample Information Box\n *\n * @group ISOBMFF\n *\n * @beta\n */\nexport type SubSampleInformationBox = FullBox & {\n\tentryCount: number;\n\tentries: SubSampleEntry[];\n};\n\n/**\n * Parse a SubSampleInformationBox from an IsoView\n *\n * @param view - The IsoView to read data from\n *\n * @returns A parsed SubSampleInformationBox\n *\n * @group ISOBMFF\n *\n * @beta\n */\nexport function subs(view: IsoView): SubSampleInformationBox {\n\tconst { version, flags } = view.readFullBox();\n\tconst entryCount = view.readUint(4);\n\tconst entries = view.readEntries(entryCount, () => {\n\t\tconst sampleDelta = view.readUint(4);\n\t\tconst subsampleCount = view.readUint(2);\n\t\tconst subsamples = view.readEntries(subsampleCount, () => ({\n\t\t\tsubsampleSize: view.readUint((version === 1) ? 4 : 2),\n\t\t\tsubsamplePriority: view.readUint(1),\n\t\t\tdiscardable: view.readUint(1),\n\t\t\tcodecSpecificParameters: view.readUint(4),\n\t\t}));\n\n\t\treturn {\n\t\t\tsampleDelta,\n\t\t\tsubsampleCount,\n\t\t\tsubsamples,\n\t\t};\n\t});\n\n\treturn {\n\t\tversion,\n\t\tflags,\n\t\tentryCount,\n\t\tentries,\n\t};\n};\n"]}