{"version":3,"file":"readUint.js","sourceRoot":"","sources":["../../../../src/iso/bmff/readers/readUint.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,QAAQ,CAAC,QAAkB,EAAE,MAAc,EAAE,IAAY;IACxE,MAAM,MAAM,GAAG,MAAM,GAAG,QAAQ,CAAC,UAAU,CAAC;IAE5C,IAAI,KAAK,GAAW,GAAG,CAAC;IACxB,IAAI,EAAU,CAAC;IACf,IAAI,EAAU,CAAC;IAEf,QAAQ,IAAI,EAAE,CAAC;QACd,KAAK,CAAC;YACL,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAClC,MAAM;QAEP,KAAK,CAAC;YACL,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACnC,MAAM;QAEP,KAAK,CAAC;YACL,EAAE,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAChC,EAAE,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACnC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;YACvB,MAAM;QAEP,KAAK,CAAC;YACL,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACnC,MAAM;QAEP,KAAK,CAAC;YACL,8DAA8D;YAC9D,yDAAyD;YACzD,EAAE,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAChC,EAAE,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACpC,KAAK,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;YACpC,MAAM;IACR,CAAC;IAED,OAAO,KAAK,CAAC;AACd,CAAC;AAAA,CAAC","sourcesContent":["export function readUint(dataView: DataView, offset: number, size: number): number {\n\tconst cursor = offset - dataView.byteOffset;\n\n\tlet value: number = NaN;\n\tlet s1: number;\n\tlet s2: number;\n\n\tswitch (size) {\n\t\tcase 1:\n\t\t\tvalue = dataView.getUint8(cursor);\n\t\t\tbreak;\n\n\t\tcase 2:\n\t\t\tvalue = dataView.getUint16(cursor);\n\t\t\tbreak;\n\n\t\tcase 3:\n\t\t\ts1 = dataView.getUint16(cursor);\n\t\t\ts2 = dataView.getUint8(cursor + 2);\n\t\t\tvalue = (s1 << 8) + s2;\n\t\t\tbreak;\n\n\t\tcase 4:\n\t\t\tvalue = dataView.getUint32(cursor);\n\t\t\tbreak;\n\n\t\tcase 8:\n\t\t\t// Warning: JavaScript cannot handle 64-bit integers natively.\n\t\t\t// This will give unexpected results for integers >= 2^53\n\t\t\ts1 = dataView.getUint32(cursor);\n\t\t\ts2 = dataView.getUint32(cursor + 4);\n\t\t\tvalue = (s1 * Math.pow(2, 32)) + s2;\n\t\t\tbreak;\n\t}\n\n\treturn value;\n};\n"]}